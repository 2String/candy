// Code generated by protoc-gen-go.
// source: gate.proto
// DO NOT EDIT!

package meta

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GateFindUserRequest struct {
	User string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
}

func (m *GateFindUserRequest) Reset()                    { *m = GateFindUserRequest{} }
func (m *GateFindUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GateFindUserRequest) ProtoMessage()               {}
func (*GateFindUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type GateFindUserResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Users  []string        `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (m *GateFindUserResponse) Reset()                    { *m = GateFindUserResponse{} }
func (m *GateFindUserResponse) String() string            { return proto.CompactTextString(m) }
func (*GateFindUserResponse) ProtoMessage()               {}
func (*GateFindUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GateFindUserResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateAddFriendRequest struct {
	UserID  int64 `protobuf:"varint,1,opt,name=UserID" json:"UserID,omitempty"`
	Confirm bool  `protobuf:"varint,2,opt,name=Confirm" json:"Confirm,omitempty"`
}

func (m *GateAddFriendRequest) Reset()                    { *m = GateAddFriendRequest{} }
func (m *GateAddFriendRequest) String() string            { return proto.CompactTextString(m) }
func (*GateAddFriendRequest) ProtoMessage()               {}
func (*GateAddFriendRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type GateAddFriendResponse struct {
	Header  *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Confirm bool            `protobuf:"varint,2,opt,name=Confirm" json:"Confirm,omitempty"`
}

func (m *GateAddFriendResponse) Reset()                    { *m = GateAddFriendResponse{} }
func (m *GateAddFriendResponse) String() string            { return proto.CompactTextString(m) }
func (*GateAddFriendResponse) ProtoMessage()               {}
func (*GateAddFriendResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GateAddFriendResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateCreateGroupRequest struct {
}

func (m *GateCreateGroupRequest) Reset()                    { *m = GateCreateGroupRequest{} }
func (m *GateCreateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GateCreateGroupRequest) ProtoMessage()               {}
func (*GateCreateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type GateCreateGroupResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *GateCreateGroupResponse) Reset()                    { *m = GateCreateGroupResponse{} }
func (m *GateCreateGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*GateCreateGroupResponse) ProtoMessage()               {}
func (*GateCreateGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *GateCreateGroupResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateRegisterRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *GateRegisterRequest) Reset()                    { *m = GateRegisterRequest{} }
func (m *GateRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*GateRegisterRequest) ProtoMessage()               {}
func (*GateRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type GateRegisterResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *GateRegisterResponse) Reset()                    { *m = GateRegisterResponse{} }
func (m *GateRegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*GateRegisterResponse) ProtoMessage()               {}
func (*GateRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *GateRegisterResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateUpdateUserInfoRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	NickName string `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty"`
	Avatar   []byte `protobuf:"bytes,3,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
}

func (m *GateUpdateUserInfoRequest) Reset()                    { *m = GateUpdateUserInfoRequest{} }
func (m *GateUpdateUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUpdateUserInfoRequest) ProtoMessage()               {}
func (*GateUpdateUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

type GateUpdateUserInfoResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *GateUpdateUserInfoResponse) Reset()                    { *m = GateUpdateUserInfoResponse{} }
func (m *GateUpdateUserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUpdateUserInfoResponse) ProtoMessage()               {}
func (*GateUpdateUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *GateUpdateUserInfoResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateUpdateUserPasswordRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *GateUpdateUserPasswordRequest) Reset()                    { *m = GateUpdateUserPasswordRequest{} }
func (m *GateUpdateUserPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUpdateUserPasswordRequest) ProtoMessage()               {}
func (*GateUpdateUserPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

type GateUpdateUserPasswordResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *GateUpdateUserPasswordResponse) Reset()                    { *m = GateUpdateUserPasswordResponse{} }
func (m *GateUpdateUserPasswordResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUpdateUserPasswordResponse) ProtoMessage()               {}
func (*GateUpdateUserPasswordResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *GateUpdateUserPasswordResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateGetUserInfoRequest struct {
	User string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
}

func (m *GateGetUserInfoRequest) Reset()                    { *m = GateGetUserInfoRequest{} }
func (m *GateGetUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GateGetUserInfoRequest) ProtoMessage()               {}
func (*GateGetUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

type GateGetUserInfoResponse struct {
	Header   *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID       int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
	User     string          `protobuf:"bytes,3,opt,name=User" json:"User,omitempty"`
	NickName string          `protobuf:"bytes,4,opt,name=NickName" json:"NickName,omitempty"`
	Avatar   []byte          `protobuf:"bytes,5,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
}

func (m *GateGetUserInfoResponse) Reset()                    { *m = GateGetUserInfoResponse{} }
func (m *GateGetUserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GateGetUserInfoResponse) ProtoMessage()               {}
func (*GateGetUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *GateGetUserInfoResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateHeartbeatRequest struct {
}

func (m *GateHeartbeatRequest) Reset()                    { *m = GateHeartbeatRequest{} }
func (m *GateHeartbeatRequest) String() string            { return proto.CompactTextString(m) }
func (*GateHeartbeatRequest) ProtoMessage()               {}
func (*GateHeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

type GateHeartbeatResponse struct {
}

func (m *GateHeartbeatResponse) Reset()                    { *m = GateHeartbeatResponse{} }
func (m *GateHeartbeatResponse) String() string            { return proto.CompactTextString(m) }
func (*GateHeartbeatResponse) ProtoMessage()               {}
func (*GateHeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

type GateUserLoginRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *GateUserLoginRequest) Reset()                    { *m = GateUserLoginRequest{} }
func (m *GateUserLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUserLoginRequest) ProtoMessage()               {}
func (*GateUserLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

type GateUserLoginResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *GateUserLoginResponse) Reset()                    { *m = GateUserLoginResponse{} }
func (m *GateUserLoginResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUserLoginResponse) ProtoMessage()               {}
func (*GateUserLoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *GateUserLoginResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateUserLogoutRequest struct {
	User string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
}

func (m *GateUserLogoutRequest) Reset()                    { *m = GateUserLogoutRequest{} }
func (m *GateUserLogoutRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUserLogoutRequest) ProtoMessage()               {}
func (*GateUserLogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

type GateUserLogoutResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GateUserLogoutResponse) Reset()                    { *m = GateUserLogoutResponse{} }
func (m *GateUserLogoutResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUserLogoutResponse) ProtoMessage()               {}
func (*GateUserLogoutResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *GateUserLogoutResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateUploadImageRequest struct {
	Image []byte `protobuf:"bytes,1,opt,name=Image,proto3" json:"Image,omitempty"`
}

func (m *GateUploadImageRequest) Reset()                    { *m = GateUploadImageRequest{} }
func (m *GateUploadImageRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUploadImageRequest) ProtoMessage()               {}
func (*GateUploadImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

type GateUploadImageResponse struct {
	Header  *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ImageID int64           `protobuf:"varint,2,opt,name=ImageID" json:"ImageID,omitempty"`
}

func (m *GateUploadImageResponse) Reset()                    { *m = GateUploadImageResponse{} }
func (m *GateUploadImageResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUploadImageResponse) ProtoMessage()               {}
func (*GateUploadImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *GateUploadImageResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateDownloadImageRequest struct {
	ImageID []int64 `protobuf:"varint,1,rep,packed,name=ImageID" json:"ImageID,omitempty"`
}

func (m *GateDownloadImageRequest) Reset()                    { *m = GateDownloadImageRequest{} }
func (m *GateDownloadImageRequest) String() string            { return proto.CompactTextString(m) }
func (*GateDownloadImageRequest) ProtoMessage()               {}
func (*GateDownloadImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

type GateDownloadImageResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Image  [][]byte        `protobuf:"bytes,2,rep,name=Image,proto3" json:"Image,omitempty"`
}

func (m *GateDownloadImageResponse) Reset()                    { *m = GateDownloadImageResponse{} }
func (m *GateDownloadImageResponse) String() string            { return proto.CompactTextString(m) }
func (*GateDownloadImageResponse) ProtoMessage()               {}
func (*GateDownloadImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *GateDownloadImageResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateNoticeRequest struct {
	ChannelID int64    `protobuf:"varint,1,opt,name=ChannelID" json:"ChannelID,omitempty"`
	Msg       *Message `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
}

func (m *GateNoticeRequest) Reset()                    { *m = GateNoticeRequest{} }
func (m *GateNoticeRequest) String() string            { return proto.CompactTextString(m) }
func (*GateNoticeRequest) ProtoMessage()               {}
func (*GateNoticeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *GateNoticeRequest) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

type GateNoticeResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GateNoticeResponse) Reset()                    { *m = GateNoticeResponse{} }
func (m *GateNoticeResponse) String() string            { return proto.CompactTextString(m) }
func (*GateNoticeResponse) ProtoMessage()               {}
func (*GateNoticeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *GateNoticeResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*GateFindUserRequest)(nil), "candy.meta.GateFindUserRequest")
	proto.RegisterType((*GateFindUserResponse)(nil), "candy.meta.GateFindUserResponse")
	proto.RegisterType((*GateAddFriendRequest)(nil), "candy.meta.GateAddFriendRequest")
	proto.RegisterType((*GateAddFriendResponse)(nil), "candy.meta.GateAddFriendResponse")
	proto.RegisterType((*GateCreateGroupRequest)(nil), "candy.meta.GateCreateGroupRequest")
	proto.RegisterType((*GateCreateGroupResponse)(nil), "candy.meta.GateCreateGroupResponse")
	proto.RegisterType((*GateRegisterRequest)(nil), "candy.meta.GateRegisterRequest")
	proto.RegisterType((*GateRegisterResponse)(nil), "candy.meta.GateRegisterResponse")
	proto.RegisterType((*GateUpdateUserInfoRequest)(nil), "candy.meta.GateUpdateUserInfoRequest")
	proto.RegisterType((*GateUpdateUserInfoResponse)(nil), "candy.meta.GateUpdateUserInfoResponse")
	proto.RegisterType((*GateUpdateUserPasswordRequest)(nil), "candy.meta.GateUpdateUserPasswordRequest")
	proto.RegisterType((*GateUpdateUserPasswordResponse)(nil), "candy.meta.GateUpdateUserPasswordResponse")
	proto.RegisterType((*GateGetUserInfoRequest)(nil), "candy.meta.GateGetUserInfoRequest")
	proto.RegisterType((*GateGetUserInfoResponse)(nil), "candy.meta.GateGetUserInfoResponse")
	proto.RegisterType((*GateHeartbeatRequest)(nil), "candy.meta.GateHeartbeatRequest")
	proto.RegisterType((*GateHeartbeatResponse)(nil), "candy.meta.GateHeartbeatResponse")
	proto.RegisterType((*GateUserLoginRequest)(nil), "candy.meta.GateUserLoginRequest")
	proto.RegisterType((*GateUserLoginResponse)(nil), "candy.meta.GateUserLoginResponse")
	proto.RegisterType((*GateUserLogoutRequest)(nil), "candy.meta.GateUserLogoutRequest")
	proto.RegisterType((*GateUserLogoutResponse)(nil), "candy.meta.GateUserLogoutResponse")
	proto.RegisterType((*GateUploadImageRequest)(nil), "candy.meta.GateUploadImageRequest")
	proto.RegisterType((*GateUploadImageResponse)(nil), "candy.meta.GateUploadImageResponse")
	proto.RegisterType((*GateDownloadImageRequest)(nil), "candy.meta.GateDownloadImageRequest")
	proto.RegisterType((*GateDownloadImageResponse)(nil), "candy.meta.GateDownloadImageResponse")
	proto.RegisterType((*GateNoticeRequest)(nil), "candy.meta.GateNoticeRequest")
	proto.RegisterType((*GateNoticeResponse)(nil), "candy.meta.GateNoticeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Gate service

type GateClient interface {
	Register(ctx context.Context, in *GateRegisterRequest, opts ...grpc.CallOption) (*GateRegisterResponse, error)
	UpdateUserInfo(ctx context.Context, in *GateUpdateUserInfoRequest, opts ...grpc.CallOption) (*GateUpdateUserInfoResponse, error)
	UpdateUserPassword(ctx context.Context, in *GateUpdateUserPasswordRequest, opts ...grpc.CallOption) (*GateUpdateUserPasswordResponse, error)
	GetUserInfo(ctx context.Context, in *GateGetUserInfoRequest, opts ...grpc.CallOption) (*GateGetUserInfoResponse, error)
	Login(ctx context.Context, in *GateUserLoginRequest, opts ...grpc.CallOption) (*GateUserLoginResponse, error)
	Logout(ctx context.Context, in *GateUserLogoutRequest, opts ...grpc.CallOption) (*GateUserLogoutResponse, error)
	NewMessage(ctx context.Context, opts ...grpc.CallOption) (Gate_NewMessageClient, error)
	// AddFriend 添加好友或确认接受添加.
	AddFriend(ctx context.Context, in *GateAddFriendRequest, opts ...grpc.CallOption) (*GateAddFriendResponse, error)
	// FindUser 添加好友前先查找出来对应的ID.
	FindUser(ctx context.Context, in *GateFindUserRequest, opts ...grpc.CallOption) (*GateFindUserResponse, error)
	CreateGroup(ctx context.Context, in *GateCreateGroupRequest, opts ...grpc.CallOption) (*GateCreateGroupResponse, error)
	Heartbeat(ctx context.Context, in *GateHeartbeatRequest, opts ...grpc.CallOption) (*GateHeartbeatResponse, error)
	UploadImage(ctx context.Context, in *GateUploadImageRequest, opts ...grpc.CallOption) (*GateUploadImageResponse, error)
	DownloadImage(ctx context.Context, in *GateDownloadImageRequest, opts ...grpc.CallOption) (*GateDownloadImageResponse, error)
	// server interface.
	Notice(ctx context.Context, in *GateNoticeRequest, opts ...grpc.CallOption) (*GateNoticeResponse, error)
}

type gateClient struct {
	cc *grpc.ClientConn
}

func NewGateClient(cc *grpc.ClientConn) GateClient {
	return &gateClient{cc}
}

func (c *gateClient) Register(ctx context.Context, in *GateRegisterRequest, opts ...grpc.CallOption) (*GateRegisterResponse, error) {
	out := new(GateRegisterResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) UpdateUserInfo(ctx context.Context, in *GateUpdateUserInfoRequest, opts ...grpc.CallOption) (*GateUpdateUserInfoResponse, error) {
	out := new(GateUpdateUserInfoResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/UpdateUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) UpdateUserPassword(ctx context.Context, in *GateUpdateUserPasswordRequest, opts ...grpc.CallOption) (*GateUpdateUserPasswordResponse, error) {
	out := new(GateUpdateUserPasswordResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/UpdateUserPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) GetUserInfo(ctx context.Context, in *GateGetUserInfoRequest, opts ...grpc.CallOption) (*GateGetUserInfoResponse, error) {
	out := new(GateGetUserInfoResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Login(ctx context.Context, in *GateUserLoginRequest, opts ...grpc.CallOption) (*GateUserLoginResponse, error) {
	out := new(GateUserLoginResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Logout(ctx context.Context, in *GateUserLogoutRequest, opts ...grpc.CallOption) (*GateUserLogoutResponse, error) {
	out := new(GateUserLogoutResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) NewMessage(ctx context.Context, opts ...grpc.CallOption) (Gate_NewMessageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Gate_serviceDesc.Streams[0], c.cc, "/candy.meta.Gate/NewMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &gateNewMessageClient{stream}
	return x, nil
}

type Gate_NewMessageClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type gateNewMessageClient struct {
	grpc.ClientStream
}

func (x *gateNewMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gateNewMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gateClient) AddFriend(ctx context.Context, in *GateAddFriendRequest, opts ...grpc.CallOption) (*GateAddFriendResponse, error) {
	out := new(GateAddFriendResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/AddFriend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) FindUser(ctx context.Context, in *GateFindUserRequest, opts ...grpc.CallOption) (*GateFindUserResponse, error) {
	out := new(GateFindUserResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/FindUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) CreateGroup(ctx context.Context, in *GateCreateGroupRequest, opts ...grpc.CallOption) (*GateCreateGroupResponse, error) {
	out := new(GateCreateGroupResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Heartbeat(ctx context.Context, in *GateHeartbeatRequest, opts ...grpc.CallOption) (*GateHeartbeatResponse, error) {
	out := new(GateHeartbeatResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) UploadImage(ctx context.Context, in *GateUploadImageRequest, opts ...grpc.CallOption) (*GateUploadImageResponse, error) {
	out := new(GateUploadImageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/UploadImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) DownloadImage(ctx context.Context, in *GateDownloadImageRequest, opts ...grpc.CallOption) (*GateDownloadImageResponse, error) {
	out := new(GateDownloadImageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/DownloadImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Notice(ctx context.Context, in *GateNoticeRequest, opts ...grpc.CallOption) (*GateNoticeResponse, error) {
	out := new(GateNoticeResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Notice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gate service

type GateServer interface {
	Register(context.Context, *GateRegisterRequest) (*GateRegisterResponse, error)
	UpdateUserInfo(context.Context, *GateUpdateUserInfoRequest) (*GateUpdateUserInfoResponse, error)
	UpdateUserPassword(context.Context, *GateUpdateUserPasswordRequest) (*GateUpdateUserPasswordResponse, error)
	GetUserInfo(context.Context, *GateGetUserInfoRequest) (*GateGetUserInfoResponse, error)
	Login(context.Context, *GateUserLoginRequest) (*GateUserLoginResponse, error)
	Logout(context.Context, *GateUserLogoutRequest) (*GateUserLogoutResponse, error)
	NewMessage(Gate_NewMessageServer) error
	// AddFriend 添加好友或确认接受添加.
	AddFriend(context.Context, *GateAddFriendRequest) (*GateAddFriendResponse, error)
	// FindUser 添加好友前先查找出来对应的ID.
	FindUser(context.Context, *GateFindUserRequest) (*GateFindUserResponse, error)
	CreateGroup(context.Context, *GateCreateGroupRequest) (*GateCreateGroupResponse, error)
	Heartbeat(context.Context, *GateHeartbeatRequest) (*GateHeartbeatResponse, error)
	UploadImage(context.Context, *GateUploadImageRequest) (*GateUploadImageResponse, error)
	DownloadImage(context.Context, *GateDownloadImageRequest) (*GateDownloadImageResponse, error)
	// server interface.
	Notice(context.Context, *GateNoticeRequest) (*GateNoticeResponse, error)
}

func RegisterGateServer(s *grpc.Server, srv GateServer) {
	s.RegisterService(&_Gate_serviceDesc, srv)
}

func _Gate_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Register(ctx, req.(*GateRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUpdateUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).UpdateUserInfo(ctx, req.(*GateUpdateUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/UpdateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).UpdateUserPassword(ctx, req.(*GateUpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateGetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).GetUserInfo(ctx, req.(*GateGetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Login(ctx, req.(*GateUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUserLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Logout(ctx, req.(*GateUserLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_NewMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GateServer).NewMessage(&gateNewMessageServer{stream})
}

type Gate_NewMessageServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type gateNewMessageServer struct {
	grpc.ServerStream
}

func (x *gateNewMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gateNewMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gate_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateAddFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).AddFriend(ctx, req.(*GateAddFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_FindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateFindUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).FindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/FindUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).FindUser(ctx, req.(*GateFindUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateCreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).CreateGroup(ctx, req.(*GateCreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Heartbeat(ctx, req.(*GateHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).UploadImage(ctx, req.(*GateUploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_DownloadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateDownloadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).DownloadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/DownloadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).DownloadImage(ctx, req.(*GateDownloadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Notice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Notice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Notice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Notice(ctx, req.(*GateNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "candy.meta.Gate",
	HandlerType: (*GateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Gate_Register_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _Gate_UpdateUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _Gate_UpdateUserPassword_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Gate_GetUserInfo_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Gate_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Gate_Logout_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _Gate_AddFriend_Handler,
		},
		{
			MethodName: "FindUser",
			Handler:    _Gate_FindUser_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Gate_CreateGroup_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Gate_Heartbeat_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _Gate_UploadImage_Handler,
		},
		{
			MethodName: "DownloadImage",
			Handler:    _Gate_DownloadImage_Handler,
		},
		{
			MethodName: "Notice",
			Handler:    _Gate_Notice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewMessage",
			Handler:       _Gate_NewMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("gate.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 766 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x56, 0xef, 0x4f, 0x13, 0x41,
	0x10, 0xcd, 0x71, 0x6d, 0x6d, 0xa7, 0x05, 0x65, 0x51, 0xa8, 0x97, 0x80, 0xe7, 0x22, 0x58, 0x31,
	0x69, 0x0c, 0x46, 0x4d, 0xfc, 0xa2, 0x48, 0x43, 0x21, 0xd2, 0xf2, 0x23, 0xd0, 0x18, 0x63, 0x62,
	0x96, 0xde, 0x52, 0x2e, 0xd0, 0xdb, 0x7a, 0xb7, 0x95, 0xf8, 0xd1, 0xff, 0xc4, 0x3f, 0xd5, 0xec,
	0xed, 0x5d, 0xb9, 0xbb, 0xbd, 0x2b, 0xd0, 0x7e, 0x69, 0xd2, 0xee, 0x9b, 0x37, 0x6f, 0x67, 0x66,
	0x5f, 0x07, 0xa0, 0x47, 0x38, 0xad, 0x0f, 0x5c, 0xc6, 0x19, 0x82, 0x2e, 0x71, 0xac, 0x3f, 0xf5,
	0x3e, 0xe5, 0xc4, 0xa8, 0x74, 0x59, 0xbf, 0xcf, 0x1c, 0x79, 0x82, 0x57, 0x61, 0xa1, 0x49, 0x38,
	0xdd, 0xb1, 0x1d, 0xeb, 0xd4, 0xa3, 0xee, 0x31, 0xfd, 0x35, 0xa4, 0x1e, 0x47, 0x15, 0xc8, 0x89,
	0xaf, 0x55, 0xcd, 0xd4, 0x6a, 0x25, 0x7c, 0x04, 0x8f, 0xe3, 0x20, 0x6f, 0xc0, 0x1c, 0x8f, 0xa2,
	0x0d, 0x28, 0x5c, 0x50, 0x62, 0x05, 0xb8, 0xf2, 0xa6, 0x51, 0xbf, 0xc9, 0x53, 0x0f, 0x51, 0xbb,
	0x3e, 0x02, 0xcd, 0x42, 0x7e, 0xe8, 0x51, 0xd7, 0xab, 0xce, 0x98, 0x7a, 0xad, 0x84, 0x3f, 0x48,
	0xca, 0x2d, 0xcb, 0xda, 0x71, 0x6d, 0xea, 0x58, 0x61, 0xe2, 0x39, 0x28, 0x88, 0x14, 0x7b, 0x0d,
	0x9f, 0x52, 0x47, 0x0f, 0xe1, 0xc1, 0x36, 0x73, 0xce, 0x6d, 0xb7, 0x5f, 0x9d, 0x31, 0xb5, 0x5a,
	0x11, 0x9f, 0xc0, 0x93, 0x44, 0xe0, 0x04, 0x62, 0x14, 0xd6, 0x2a, 0x2c, 0x0a, 0xd6, 0x6d, 0x97,
	0x12, 0x4e, 0x9b, 0x2e, 0x1b, 0x0e, 0x02, 0x41, 0xf8, 0x08, 0x96, 0x94, 0x93, 0x09, 0x32, 0x02,
	0xcc, 0xec, 0x35, 0xfc, 0x64, 0x3a, 0x7e, 0x27, 0x6b, 0x7e, 0x4c, 0x7b, 0xb6, 0xc7, 0x33, 0x6a,
	0x8e, 0x1e, 0x41, 0xf1, 0x90, 0x78, 0xde, 0x35, 0x73, 0x2d, 0x3f, 0xac, 0x84, 0xdb, 0xb2, 0x64,
	0x37, 0x61, 0x53, 0xca, 0xf8, 0x0a, 0x4f, 0x05, 0xdf, 0xe9, 0xc0, 0x12, 0x9f, 0xa2, 0xe8, 0xce,
	0x39, 0xcb, 0x14, 0xd3, 0xb6, 0xbb, 0x97, 0x6d, 0xd2, 0xa7, 0x52, 0x8c, 0xe8, 0xd3, 0xd6, 0x6f,
	0xc2, 0x89, 0x5b, 0xd5, 0x4d, 0xad, 0x56, 0xc1, 0x27, 0x60, 0xa4, 0x91, 0x4d, 0x29, 0xf1, 0x13,
	0x2c, 0xc7, 0x59, 0xc3, 0x92, 0xdc, 0xb5, 0x66, 0xdf, 0x60, 0x25, 0x8b, 0x60, 0x4a, 0x69, 0xeb,
	0x72, 0x62, 0x9a, 0x94, 0x8f, 0x2d, 0x1d, 0xfe, 0xab, 0xc9, 0x01, 0x8a, 0x01, 0xa7, 0xcb, 0x3d,
	0xca, 0xa0, 0x2b, 0xcd, 0xc9, 0x25, 0x9a, 0x93, 0xf7, 0x9b, 0xb3, 0x28, 0x27, 0x67, 0x97, 0x12,
	0x97, 0x9f, 0x51, 0xc2, 0xc3, 0xd9, 0x5e, 0x92, 0x6f, 0x29, 0xf2, 0xbb, 0x4c, 0x89, 0xdf, 0xcb,
	0x00, 0x91, 0x64, 0x9f, 0xf5, 0x6c, 0xe7, 0xae, 0xe5, 0x3e, 0x90, 0x84, 0x91, 0xb8, 0x29, 0xab,
	0xbc, 0x16, 0x23, 0x64, 0x43, 0x9e, 0x5e, 0xe4, 0x86, 0x6c, 0x46, 0x14, 0x76, 0xff, 0xc4, 0xf8,
	0x65, 0xc0, 0x32, 0xb8, 0x62, 0xc4, 0xda, 0xeb, 0x93, 0x1e, 0x0d, 0xb3, 0xcd, 0x42, 0xde, 0xff,
	0xee, 0x93, 0x54, 0x70, 0x47, 0xb6, 0x34, 0x06, 0x9c, 0xcc, 0x85, 0xfc, 0xe0, 0xd1, 0x6d, 0x5f,
	0x43, 0x55, 0xf0, 0x36, 0xd8, 0xb5, 0xa3, 0x48, 0x88, 0x80, 0x35, 0x53, 0xaf, 0xe9, 0xb8, 0x23,
	0x9f, 0x6f, 0x02, 0x3c, 0x99, 0x33, 0xcb, 0xcb, 0x09, 0x67, 0xae, 0xe0, 0x5d, 0x98, 0x17, 0xbc,
	0x6d, 0xc6, 0xed, 0xee, 0x28, 0xfb, 0x3c, 0x94, 0xb6, 0x2f, 0x88, 0xe3, 0xd0, 0xab, 0x91, 0x33,
	0x9b, 0xa0, 0xb7, 0xbc, 0x9e, 0xaf, 0xbc, 0xbc, 0xb9, 0x10, 0xe5, 0x6f, 0x51, 0xcf, 0x23, 0x3d,
	0x8a, 0x3f, 0x03, 0x8a, 0x32, 0xdd, 0x5f, 0xda, 0xe6, 0xbf, 0x12, 0xe4, 0x04, 0x05, 0x6a, 0x41,
	0x31, 0xf4, 0x3d, 0xf4, 0x2c, 0x1a, 0x90, 0x62, 0xa4, 0x86, 0x99, 0x0d, 0x08, 0x34, 0xfc, 0x84,
	0xb9, 0xb8, 0x53, 0xa1, 0xb5, 0x64, 0x4c, 0xaa, 0x2d, 0x1a, 0xeb, 0xb7, 0xc1, 0x82, 0x04, 0x97,
	0x80, 0x54, 0xcf, 0x41, 0xaf, 0xb2, 0xa3, 0x13, 0xc6, 0x66, 0x6c, 0xdc, 0x05, 0x1a, 0x24, 0xeb,
	0x40, 0x39, 0xe2, 0x2e, 0x08, 0x27, 0x43, 0x55, 0x8f, 0x32, 0x56, 0xc7, 0x62, 0x02, 0xde, 0x7d,
	0xc8, 0xfb, 0xaf, 0x18, 0x29, 0x05, 0x4d, 0x1a, 0x83, 0xf1, 0x7c, 0x0c, 0x22, 0x60, 0x3b, 0x80,
	0x82, 0x7c, 0x9b, 0x28, 0x0b, 0x7c, 0xf3, 0xbc, 0x0d, 0x3c, 0x0e, 0x12, 0x10, 0x7e, 0x04, 0x68,
	0xd3, 0xeb, 0x60, 0xd8, 0x50, 0xda, 0x04, 0x1a, 0x69, 0x3f, 0xd6, 0xb4, 0x37, 0x1a, 0x3a, 0x84,
	0xd2, 0x68, 0x83, 0x50, 0xaf, 0x97, 0xdc, 0x4a, 0xd4, 0xeb, 0xa9, 0xeb, 0x47, 0x0b, 0x8a, 0xe1,
	0x7e, 0xa4, 0x4e, 0x68, 0x62, 0xbd, 0x52, 0x27, 0x54, 0x59, 0xad, 0x3a, 0x50, 0x8e, 0xac, 0x1c,
	0x6a, 0x4f, 0xd5, 0x4d, 0x45, 0xed, 0x69, 0xda, 0xce, 0x72, 0x08, 0xa5, 0x91, 0xdd, 0xab, 0x17,
	0x4f, 0xfe, 0x43, 0xa8, 0x17, 0x57, 0xfe, 0x2b, 0x84, 0xd2, 0x88, 0x11, 0xaa, 0x4a, 0x55, 0x3b,
	0x55, 0x95, 0xa6, 0x39, 0xe9, 0x0f, 0x98, 0x8d, 0x79, 0x1b, 0x7a, 0x91, 0x8c, 0x4a, 0xf3, 0x49,
	0x63, 0xed, 0x16, 0x54, 0xc0, 0xde, 0x84, 0x82, 0xf4, 0x25, 0xb4, 0x9c, 0x0c, 0x88, 0x39, 0x9f,
	0xb1, 0x92, 0x75, 0x2c, 0x89, 0xbe, 0x14, 0xbe, 0xe7, 0xc4, 0xd1, 0x59, 0xc1, 0xdf, 0xa7, 0xdf,
	0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xa5, 0xe7, 0x2f, 0x77, 0x0b, 0x00, 0x00,
}
