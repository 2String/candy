// Code generated by protoc-gen-go.
// source: notice.proto
// DO NOT EDIT!

package meta

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SubscribeRequest struct {
	ID   int64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type SubscribeResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *SubscribeResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type UnsubscribeRequest struct {
	ID   int64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
}

func (m *UnsubscribeRequest) Reset()                    { *m = UnsubscribeRequest{} }
func (m *UnsubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*UnsubscribeRequest) ProtoMessage()               {}
func (*UnsubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

type UnsubscribeResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *UnsubscribeResponse) Reset()                    { *m = UnsubscribeResponse{} }
func (m *UnsubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*UnsubscribeResponse) ProtoMessage()               {}
func (*UnsubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *UnsubscribeResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type PushRequest struct {
	ID  []int64  `protobuf:"varint,1,rep,packed,name=ID" json:"ID,omitempty"`
	Msg *Message `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
}

func (m *PushRequest) Reset()                    { *m = PushRequest{} }
func (m *PushRequest) String() string            { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()               {}
func (*PushRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *PushRequest) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

type PushResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *PushResponse) Reset()                    { *m = PushResponse{} }
func (m *PushResponse) String() string            { return proto.CompactTextString(m) }
func (*PushResponse) ProtoMessage()               {}
func (*PushResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *PushResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "candy.meta.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "candy.meta.SubscribeResponse")
	proto.RegisterType((*UnsubscribeRequest)(nil), "candy.meta.UnsubscribeRequest")
	proto.RegisterType((*UnsubscribeResponse)(nil), "candy.meta.UnsubscribeResponse")
	proto.RegisterType((*PushRequest)(nil), "candy.meta.PushRequest")
	proto.RegisterType((*PushResponse)(nil), "candy.meta.PushResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Notice service

type NoticeClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
}

type noticeClient struct {
	cc *grpc.ClientConn
}

func NewNoticeClient(cc *grpc.ClientConn) NoticeClient {
	return &noticeClient{cc}
}

func (c *noticeClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Notice/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	out := new(UnsubscribeResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Notice/Unsubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Notice/Push", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notice service

type NoticeServer interface {
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
	Push(context.Context, *PushRequest) (*PushResponse, error)
}

func RegisterNoticeServer(s *grpc.Server, srv NoticeServer) {
	s.RegisterService(&_Notice_serviceDesc, srv)
}

func _Notice_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Notice/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Notice/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Notice/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "candy.meta.Notice",
	HandlerType: (*NoticeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _Notice_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _Notice_Unsubscribe_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Notice_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor3,
}

func init() { proto.RegisterFile("notice.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x92, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x95, 0x26, 0x8a, 0xd4, 0x4b, 0x06, 0xb8, 0x0e, 0x44, 0x11, 0x7f, 0xa2, 0x4c, 0x11,
	0x42, 0x1e, 0xc2, 0x04, 0x0c, 0x08, 0xc4, 0x50, 0x86, 0x56, 0x08, 0xc4, 0xc2, 0x96, 0xa4, 0xa7,
	0xa6, 0x43, 0xec, 0x92, 0x73, 0x06, 0x3e, 0x2c, 0xdf, 0x05, 0xd5, 0x29, 0x60, 0x5a, 0x55, 0x02,
	0x56, 0xbf, 0xf7, 0xee, 0x67, 0x3f, 0x1f, 0x84, 0x52, 0xe9, 0x45, 0x45, 0x62, 0xd9, 0x2a, 0xad,
	0x10, 0xaa, 0x42, 0xce, 0xde, 0x44, 0x43, 0xba, 0x88, 0xc3, 0x4a, 0x35, 0x8d, 0x92, 0xbd, 0x92,
	0x9e, 0xc1, 0xde, 0x53, 0x57, 0x72, 0xd5, 0x2e, 0x4a, 0x7a, 0xa4, 0xd7, 0x8e, 0x58, 0x23, 0xc0,
	0xe0, 0xfe, 0x2e, 0x72, 0x12, 0x27, 0x73, 0x31, 0x04, 0xaf, 0x56, 0xac, 0xa3, 0x41, 0xe2, 0x64,
	0xc3, 0xf4, 0x1a, 0xf6, 0x2d, 0x37, 0x2f, 0x95, 0x64, 0xc2, 0x53, 0xf0, 0x6b, 0x2a, 0x66, 0xd4,
	0x9a, 0x48, 0x90, 0xc7, 0xe2, 0x9b, 0x26, 0x3e, 0x5d, 0x63, 0xe3, 0x48, 0x05, 0xe0, 0xb3, 0xe4,
	0xdf, 0x03, 0x6f, 0x60, 0xf4, 0xc3, 0xff, 0x0f, 0xe4, 0x15, 0x04, 0x0f, 0x1d, 0xd7, 0x9b, 0x2c,
	0x37, 0x73, 0x31, 0x01, 0x77, 0xc2, 0x73, 0x83, 0x0a, 0xf2, 0x91, 0x3d, 0x63, 0x42, 0xcc, 0xc5,
	0x9c, 0xd2, 0x4b, 0x08, 0xfb, 0xf0, 0xdf, 0xc1, 0xf9, 0xbb, 0x03, 0xfe, 0xd4, 0xfc, 0x02, 0x8e,
	0x61, 0xf8, 0xd5, 0x1b, 0x1e, 0xda, 0x99, 0xcd, 0xf2, 0xe3, 0xa3, 0x1d, 0xea, 0xfa, 0x02, 0x53,
	0x08, 0xac, 0x42, 0xf0, 0xd8, 0x76, 0x6f, 0x37, 0x1b, 0x9f, 0xec, 0xd4, 0xd7, 0xf3, 0x2e, 0xc0,
	0x5b, 0x3d, 0x10, 0x0f, 0x6c, 0xa3, 0xd5, 0x57, 0x1c, 0x6d, 0x0b, 0x7d, 0xf4, 0xd6, 0x7f, 0xf1,
	0x56, 0x87, 0xa5, 0x6f, 0x36, 0xe9, 0xfc, 0x23, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x9c, 0xc1, 0x5b,
	0x73, 0x02, 0x00, 0x00,
}
