syntax = "proto3";
package candy.meta;

option go_package = "meta";

import "common.proto";


service Gate {
    rpc Register (GateRegisterRequest) returns (GateRegisterResponse);
    rpc UpdateUserInfo (GateUpdateUserInfoRequest) returns (GateUpdateUserInfoResponse);
    rpc UpdateUserPassword (GateUpdateUserPasswordRequest) returns (GateUpdateUserPasswordResponse);
    rpc GetUserInfo (GateGetUserInfoRequest) returns (GateGetUserInfoResponse);

    rpc Login (GateUserLoginRequest) returns (GateUserLoginResponse);
    rpc Logout (GateUserLogoutRequest) returns (GateUserLogoutResponse);

    rpc UserMessage (stream Message) returns (stream Message);

    // AddFriend 添加好友或确认接受添加.
    rpc AddFriend (GateAddFriendRequest) returns (GateAddFriendResponse);
    // FindUser 添加好友前先查找出来对应的ID.
    rpc FindUser (GateFindUserRequest) returns (GateFindUserResponse);

    rpc CreateGroup (GateCreateGroupRequest) returns (GateCreateGroupResponse);

    rpc Heartbeat (GateHeartbeatRequest) returns (GateHeartbeatResponse);

    rpc UploadImage (GateUploadImageRequest) returns (GateUploadImageResponse);
    rpc DownloadImage (GateDownloadImageRequest) returns (GateDownloadImageResponse);


    // server interface.
    rpc Notice (GateNoticeRequest) returns (GateNoticeResponse);

}

message GateFindUserRequest {
    string User = 1;
}

message GateFindUserResponse {
    ResponseHeader header = 1;
    int64 ID = 2;

}

message GateAddFriendRequest {
    int64 UserID = 1;
    bool Confirm = 2;
}

message GateAddFriendResponse {
    ResponseHeader header = 1;
    bool Confirm = 2;
}

message GateCreateGroupRequest {
}

message GateCreateGroupResponse {
    ResponseHeader header = 1;
    int64 ID = 2;
}


message GateRegisterRequest {
    string User = 1;
    string Password = 2;
}

message GateRegisterResponse {
    ResponseHeader header = 1;
    int64 ID = 2;
}

message GateUpdateUserInfoRequest {
    string User = 1;
    string NickName = 2;
    bytes Avatar = 3;
}

message GateUpdateUserInfoResponse {
    ResponseHeader header = 1;
    int64 ID = 2;
}

message GateUpdateUserPasswordRequest {
    string User = 1;
    string Password = 2;
}

message GateUpdateUserPasswordResponse {
    ResponseHeader header = 1;
    int64 ID = 2;
}

message GateGetUserInfoRequest {
    string User = 1;
}

message GateGetUserInfoResponse {
    ResponseHeader header = 1;
    int64 ID = 2;
    string User = 3;
    string NickName = 4;
    bytes Avatar = 5;
}


message GateHeartbeatRequest { }

message GateHeartbeatResponse {}

message GateUserLoginRequest {
    string User = 1;
    string Password = 2;
}

message GateUserLoginResponse {
    ResponseHeader header = 1;
    int64 ID = 2;
}


message GateUserLogoutRequest {}

message GateUserLogoutResponse {
    ResponseHeader header = 1;
}


message GateUploadImageRequest {
    bytes Image = 1;
}

message GateUploadImageResponse {
    ResponseHeader header = 1;
    int64 ImageID = 2;
}

message GateDownloadImageRequest {
    repeated int64 ImageID = 1;
}
message GateDownloadImageResponse {
    ResponseHeader header = 1;
    repeated bytes Image = 2;
}


message GateNoticeRequest {
    int64 ChannelID = 1;
    Message Msg = 2;
}


message GateNoticeResponse {
    ResponseHeader header = 1;
}

