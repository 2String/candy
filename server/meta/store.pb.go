// Code generated by protoc-gen-go.
// source: store.proto
// DO NOT EDIT!

package meta

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StoreFindUserRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *StoreFindUserRequest) Reset()                    { *m = StoreFindUserRequest{} }
func (m *StoreFindUserRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreFindUserRequest) ProtoMessage()               {}
func (*StoreFindUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type StoreFindUserResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *StoreFindUserResponse) Reset()                    { *m = StoreFindUserResponse{} }
func (m *StoreFindUserResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreFindUserResponse) ProtoMessage()               {}
func (*StoreFindUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *StoreFindUserResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreAddFriendRequest struct {
	From    int64 `protobuf:"varint,1,opt,name=From" json:"From,omitempty"`
	To      int64 `protobuf:"varint,2,opt,name=To" json:"To,omitempty"`
	Confirm bool  `protobuf:"varint,3,opt,name=Confirm" json:"Confirm,omitempty"`
}

func (m *StoreAddFriendRequest) Reset()                    { *m = StoreAddFriendRequest{} }
func (m *StoreAddFriendRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreAddFriendRequest) ProtoMessage()               {}
func (*StoreAddFriendRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

type StoreAddFriendResponse struct {
	Header  *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Confirm bool            `protobuf:"varint,2,opt,name=Confirm" json:"Confirm,omitempty"`
}

func (m *StoreAddFriendResponse) Reset()                    { *m = StoreAddFriendResponse{} }
func (m *StoreAddFriendResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreAddFriendResponse) ProtoMessage()               {}
func (*StoreAddFriendResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *StoreAddFriendResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreRegisterRequest struct {
	ID       int64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	User     string `protobuf:"bytes,2,opt,name=User" json:"User,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=Password" json:"Password,omitempty"`
}

func (m *StoreRegisterRequest) Reset()                    { *m = StoreRegisterRequest{} }
func (m *StoreRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreRegisterRequest) ProtoMessage()               {}
func (*StoreRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

type StoreRegisterResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *StoreRegisterResponse) Reset()                    { *m = StoreRegisterResponse{} }
func (m *StoreRegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreRegisterResponse) ProtoMessage()               {}
func (*StoreRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *StoreRegisterResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreUpdateUserInfoRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	NickName string `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty"`
	Avatar   []byte `protobuf:"bytes,3,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
}

func (m *StoreUpdateUserInfoRequest) Reset()                    { *m = StoreUpdateUserInfoRequest{} }
func (m *StoreUpdateUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreUpdateUserInfoRequest) ProtoMessage()               {}
func (*StoreUpdateUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

type StoreUpdateUserInfoResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *StoreUpdateUserInfoResponse) Reset()                    { *m = StoreUpdateUserInfoResponse{} }
func (m *StoreUpdateUserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreUpdateUserInfoResponse) ProtoMessage()               {}
func (*StoreUpdateUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *StoreUpdateUserInfoResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreUpdateUserPasswordRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *StoreUpdateUserPasswordRequest) Reset()                    { *m = StoreUpdateUserPasswordRequest{} }
func (m *StoreUpdateUserPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreUpdateUserPasswordRequest) ProtoMessage()               {}
func (*StoreUpdateUserPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

type StoreUpdateUserPasswordResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *StoreUpdateUserPasswordResponse) Reset()                    { *m = StoreUpdateUserPasswordResponse{} }
func (m *StoreUpdateUserPasswordResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreUpdateUserPasswordResponse) ProtoMessage()               {}
func (*StoreUpdateUserPasswordResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *StoreUpdateUserPasswordResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreGetUserInfoRequest struct {
	User string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
}

func (m *StoreGetUserInfoRequest) Reset()                    { *m = StoreGetUserInfoRequest{} }
func (m *StoreGetUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreGetUserInfoRequest) ProtoMessage()               {}
func (*StoreGetUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

type StoreGetUserInfoResponse struct {
	Header   *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID       int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
	User     string          `protobuf:"bytes,3,opt,name=User" json:"User,omitempty"`
	NickName string          `protobuf:"bytes,4,opt,name=NickName" json:"NickName,omitempty"`
	Avatar   []byte          `protobuf:"bytes,5,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
}

func (m *StoreGetUserInfoResponse) Reset()                    { *m = StoreGetUserInfoResponse{} }
func (m *StoreGetUserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreGetUserInfoResponse) ProtoMessage()               {}
func (*StoreGetUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *StoreGetUserInfoResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreAuthRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *StoreAuthRequest) Reset()                    { *m = StoreAuthRequest{} }
func (m *StoreAuthRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreAuthRequest) ProtoMessage()               {}
func (*StoreAuthRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{12} }

type StoreAuthResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *StoreAuthResponse) Reset()                    { *m = StoreAuthResponse{} }
func (m *StoreAuthResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreAuthResponse) ProtoMessage()               {}
func (*StoreAuthResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{13} }

func (m *StoreAuthResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreCreateGroupRequest struct {
	UserID  int64 `protobuf:"varint,1,opt,name=UserID" json:"UserID,omitempty"`
	GroupID int64 `protobuf:"varint,2,opt,name=GroupID" json:"GroupID,omitempty"`
}

func (m *StoreCreateGroupRequest) Reset()                    { *m = StoreCreateGroupRequest{} }
func (m *StoreCreateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreCreateGroupRequest) ProtoMessage()               {}
func (*StoreCreateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{14} }

type StoreCreateGroupResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *StoreCreateGroupResponse) Reset()                    { *m = StoreCreateGroupResponse{} }
func (m *StoreCreateGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreCreateGroupResponse) ProtoMessage()               {}
func (*StoreCreateGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{15} }

func (m *StoreCreateGroupResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreNewMessageRequest struct {
	Msg *Message `protobuf:"bytes,1,opt,name=Msg" json:"Msg,omitempty"`
}

func (m *StoreNewMessageRequest) Reset()                    { *m = StoreNewMessageRequest{} }
func (m *StoreNewMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreNewMessageRequest) ProtoMessage()               {}
func (*StoreNewMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{16} }

func (m *StoreNewMessageRequest) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

type StoreNewMessageResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *StoreNewMessageResponse) Reset()                    { *m = StoreNewMessageResponse{} }
func (m *StoreNewMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreNewMessageResponse) ProtoMessage()               {}
func (*StoreNewMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{17} }

func (m *StoreNewMessageResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*StoreFindUserRequest)(nil), "candy.meta.StoreFindUserRequest")
	proto.RegisterType((*StoreFindUserResponse)(nil), "candy.meta.StoreFindUserResponse")
	proto.RegisterType((*StoreAddFriendRequest)(nil), "candy.meta.StoreAddFriendRequest")
	proto.RegisterType((*StoreAddFriendResponse)(nil), "candy.meta.StoreAddFriendResponse")
	proto.RegisterType((*StoreRegisterRequest)(nil), "candy.meta.StoreRegisterRequest")
	proto.RegisterType((*StoreRegisterResponse)(nil), "candy.meta.StoreRegisterResponse")
	proto.RegisterType((*StoreUpdateUserInfoRequest)(nil), "candy.meta.StoreUpdateUserInfoRequest")
	proto.RegisterType((*StoreUpdateUserInfoResponse)(nil), "candy.meta.StoreUpdateUserInfoResponse")
	proto.RegisterType((*StoreUpdateUserPasswordRequest)(nil), "candy.meta.StoreUpdateUserPasswordRequest")
	proto.RegisterType((*StoreUpdateUserPasswordResponse)(nil), "candy.meta.StoreUpdateUserPasswordResponse")
	proto.RegisterType((*StoreGetUserInfoRequest)(nil), "candy.meta.StoreGetUserInfoRequest")
	proto.RegisterType((*StoreGetUserInfoResponse)(nil), "candy.meta.StoreGetUserInfoResponse")
	proto.RegisterType((*StoreAuthRequest)(nil), "candy.meta.StoreAuthRequest")
	proto.RegisterType((*StoreAuthResponse)(nil), "candy.meta.StoreAuthResponse")
	proto.RegisterType((*StoreCreateGroupRequest)(nil), "candy.meta.StoreCreateGroupRequest")
	proto.RegisterType((*StoreCreateGroupResponse)(nil), "candy.meta.StoreCreateGroupResponse")
	proto.RegisterType((*StoreNewMessageRequest)(nil), "candy.meta.StoreNewMessageRequest")
	proto.RegisterType((*StoreNewMessageResponse)(nil), "candy.meta.StoreNewMessageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Store service

type StoreClient interface {
	Register(ctx context.Context, in *StoreRegisterRequest, opts ...grpc.CallOption) (*StoreRegisterResponse, error)
	UpdateUserInfo(ctx context.Context, in *StoreUpdateUserInfoRequest, opts ...grpc.CallOption) (*StoreUpdateUserInfoResponse, error)
	UpdateUserPassword(ctx context.Context, in *StoreUpdateUserPasswordRequest, opts ...grpc.CallOption) (*StoreUpdateUserPasswordResponse, error)
	GetUserInfo(ctx context.Context, in *StoreGetUserInfoRequest, opts ...grpc.CallOption) (*StoreGetUserInfoResponse, error)
	Auth(ctx context.Context, in *StoreAuthRequest, opts ...grpc.CallOption) (*StoreAuthResponse, error)
	// AddFriend 添加好友，两人都添加过对方后才可以聊天.
	AddFriend(ctx context.Context, in *StoreAddFriendRequest, opts ...grpc.CallOption) (*StoreAddFriendResponse, error)
	// FindUser 根据字符串的用户名查的用户信息.
	FindUser(ctx context.Context, in *StoreFindUserRequest, opts ...grpc.CallOption) (*StoreFindUserResponse, error)
	CreateGroup(ctx context.Context, in *StoreCreateGroupRequest, opts ...grpc.CallOption) (*StoreCreateGroupResponse, error)
	NewMessage(ctx context.Context, in *StoreNewMessageRequest, opts ...grpc.CallOption) (*StoreNewMessageResponse, error)
}

type storeClient struct {
	cc *grpc.ClientConn
}

func NewStoreClient(cc *grpc.ClientConn) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) Register(ctx context.Context, in *StoreRegisterRequest, opts ...grpc.CallOption) (*StoreRegisterResponse, error) {
	out := new(StoreRegisterResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) UpdateUserInfo(ctx context.Context, in *StoreUpdateUserInfoRequest, opts ...grpc.CallOption) (*StoreUpdateUserInfoResponse, error) {
	out := new(StoreUpdateUserInfoResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/UpdateUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) UpdateUserPassword(ctx context.Context, in *StoreUpdateUserPasswordRequest, opts ...grpc.CallOption) (*StoreUpdateUserPasswordResponse, error) {
	out := new(StoreUpdateUserPasswordResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/UpdateUserPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetUserInfo(ctx context.Context, in *StoreGetUserInfoRequest, opts ...grpc.CallOption) (*StoreGetUserInfoResponse, error) {
	out := new(StoreGetUserInfoResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Auth(ctx context.Context, in *StoreAuthRequest, opts ...grpc.CallOption) (*StoreAuthResponse, error) {
	out := new(StoreAuthResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) AddFriend(ctx context.Context, in *StoreAddFriendRequest, opts ...grpc.CallOption) (*StoreAddFriendResponse, error) {
	out := new(StoreAddFriendResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/AddFriend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) FindUser(ctx context.Context, in *StoreFindUserRequest, opts ...grpc.CallOption) (*StoreFindUserResponse, error) {
	out := new(StoreFindUserResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/FindUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) CreateGroup(ctx context.Context, in *StoreCreateGroupRequest, opts ...grpc.CallOption) (*StoreCreateGroupResponse, error) {
	out := new(StoreCreateGroupResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) NewMessage(ctx context.Context, in *StoreNewMessageRequest, opts ...grpc.CallOption) (*StoreNewMessageResponse, error) {
	out := new(StoreNewMessageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/NewMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Store service

type StoreServer interface {
	Register(context.Context, *StoreRegisterRequest) (*StoreRegisterResponse, error)
	UpdateUserInfo(context.Context, *StoreUpdateUserInfoRequest) (*StoreUpdateUserInfoResponse, error)
	UpdateUserPassword(context.Context, *StoreUpdateUserPasswordRequest) (*StoreUpdateUserPasswordResponse, error)
	GetUserInfo(context.Context, *StoreGetUserInfoRequest) (*StoreGetUserInfoResponse, error)
	Auth(context.Context, *StoreAuthRequest) (*StoreAuthResponse, error)
	// AddFriend 添加好友，两人都添加过对方后才可以聊天.
	AddFriend(context.Context, *StoreAddFriendRequest) (*StoreAddFriendResponse, error)
	// FindUser 根据字符串的用户名查的用户信息.
	FindUser(context.Context, *StoreFindUserRequest) (*StoreFindUserResponse, error)
	CreateGroup(context.Context, *StoreCreateGroupRequest) (*StoreCreateGroupResponse, error)
	NewMessage(context.Context, *StoreNewMessageRequest) (*StoreNewMessageResponse, error)
}

func RegisterStoreServer(s *grpc.Server, srv StoreServer) {
	s.RegisterService(&_Store_serviceDesc, srv)
}

func _Store_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Register(ctx, req.(*StoreRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreUpdateUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).UpdateUserInfo(ctx, req.(*StoreUpdateUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreUpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/UpdateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).UpdateUserPassword(ctx, req.(*StoreUpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreGetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetUserInfo(ctx, req.(*StoreGetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Auth(ctx, req.(*StoreAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreAddFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).AddFriend(ctx, req.(*StoreAddFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_FindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreFindUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).FindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/FindUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).FindUser(ctx, req.(*StoreFindUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreCreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).CreateGroup(ctx, req.(*StoreCreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_NewMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreNewMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).NewMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/NewMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).NewMessage(ctx, req.(*StoreNewMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Store_serviceDesc = grpc.ServiceDesc{
	ServiceName: "candy.meta.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Store_Register_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _Store_UpdateUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _Store_UpdateUserPassword_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Store_GetUserInfo_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Store_Auth_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _Store_AddFriend_Handler,
		},
		{
			MethodName: "FindUser",
			Handler:    _Store_FindUser_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Store_CreateGroup_Handler,
		},
		{
			MethodName: "NewMessage",
			Handler:    _Store_NewMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor4,
}

func init() { proto.RegisterFile("store.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x56, 0x5d, 0x6f, 0xda, 0x3c,
	0x18, 0x15, 0x1f, 0x4d, 0xe1, 0x01, 0xd1, 0xbe, 0x7e, 0xf7, 0x81, 0xb2, 0x2f, 0xe6, 0x56, 0x2b,
	0xea, 0x24, 0x2e, 0xd8, 0x5d, 0xaf, 0x56, 0xd8, 0xe8, 0xaa, 0xad, 0x30, 0xb1, 0x45, 0xea, 0x76,
	0xe7, 0x11, 0x97, 0xa2, 0x29, 0x31, 0xb3, 0xcd, 0xaa, 0xdd, 0xee, 0x8f, 0xec, 0xaf, 0x4e, 0x71,
	0x1c, 0x70, 0xe3, 0x90, 0xb5, 0xe5, 0xda, 0xe7, 0x9c, 0xe7, 0xe4, 0x3c, 0x3e, 0x18, 0xa8, 0x09,
	0xc9, 0x38, 0xed, 0xcc, 0x39, 0x93, 0x0c, 0xc1, 0x84, 0x84, 0xfe, 0xaf, 0x4e, 0x40, 0x25, 0x71,
	0xeb, 0x13, 0x16, 0x04, 0x2c, 0x8c, 0x4f, 0xf0, 0x3e, 0xdc, 0xfb, 0x14, 0x01, 0x07, 0xb3, 0xd0,
	0xf7, 0x04, 0xe5, 0x63, 0xfa, 0x63, 0x41, 0x85, 0x44, 0x75, 0x28, 0x2f, 0x04, 0xe5, 0xcd, 0x42,
	0xab, 0xd0, 0xae, 0xe2, 0x11, 0xdc, 0x4f, 0xa1, 0xc4, 0x9c, 0x85, 0x82, 0xa2, 0x43, 0x70, 0x2e,
	0x29, 0xf1, 0x35, 0xb0, 0xd6, 0x75, 0x3b, 0xab, 0x49, 0x9d, 0x04, 0xf5, 0x4e, 0x21, 0x10, 0x40,
	0xf1, 0xf4, 0x4d, 0xb3, 0xd8, 0x2a, 0xb4, 0x4b, 0xb8, 0xa7, 0x05, 0x8f, 0x7d, 0x7f, 0xc0, 0x67,
	0x34, 0xf4, 0x8d, 0xb9, 0x03, 0xce, 0x02, 0x25, 0x57, 0x8a, 0x28, 0x9f, 0x59, 0x4c, 0x41, 0x3b,
	0xb0, 0xdd, 0x67, 0xe1, 0xc5, 0x8c, 0x07, 0xcd, 0x52, 0xab, 0xd0, 0xae, 0x60, 0x0f, 0x1e, 0xa4,
	0x35, 0xee, 0xe0, 0xca, 0x90, 0x2d, 0x2a, 0xd9, 0x9e, 0x4e, 0x64, 0x4c, 0xa7, 0x33, 0x21, 0x57,
	0x89, 0xc4, 0xf6, 0x63, 0x5f, 0x75, 0x28, 0x47, 0x31, 0x28, 0x46, 0x15, 0xed, 0x42, 0xe5, 0x23,
	0x11, 0xe2, 0x8a, 0x71, 0x5f, 0x59, 0xab, 0xe2, 0xbe, 0xfe, 0xbc, 0x95, 0xc6, 0xed, 0x9d, 0xe1,
	0x0f, 0xe0, 0x2a, 0x11, 0x6f, 0xee, 0x13, 0x49, 0xa3, 0x79, 0xa7, 0xe1, 0x05, 0x33, 0x82, 0xf2,
	0x96, 0x0b, 0x8a, 0x2c, 0x0c, 0x67, 0x93, 0xef, 0x43, 0x12, 0x50, 0x6d, 0xaa, 0x01, 0xce, 0xf1,
	0x4f, 0x22, 0x09, 0x57, 0x96, 0xea, 0xd8, 0x83, 0x47, 0x99, 0x6a, 0x1b, 0x2e, 0xf2, 0x35, 0x3c,
	0x4d, 0xc9, 0x26, 0x51, 0xac, 0x35, 0xba, 0xcc, 0x4a, 0x19, 0xc5, 0x5f, 0xe0, 0xd9, 0x5a, 0x85,
	0x0d, 0xcd, 0x1d, 0xc0, 0x43, 0x25, 0x7d, 0x42, 0x65, 0x6e, 0x7c, 0xf8, 0x77, 0x01, 0x9a, 0x36,
	0x72, 0xb3, 0xe9, 0xcb, 0x11, 0x25, 0x6b, 0x43, 0xe5, 0xd4, 0x86, 0xb6, 0xd4, 0x86, 0xba, 0xb0,
	0x1b, 0xdf, 0xe7, 0x85, 0xbc, 0xbc, 0x69, 0x78, 0xef, 0xe1, 0x3f, 0x83, 0xb3, 0x61, 0x5c, 0x47,
	0x3a, 0xae, 0x3e, 0xa7, 0x44, 0xd2, 0x13, 0xce, 0x16, 0xf3, 0xc4, 0x47, 0x03, 0x1c, 0x95, 0x4b,
	0x52, 0x80, 0x1d, 0xd8, 0x56, 0xe7, 0x4b, 0xee, 0x40, 0x07, 0x78, 0x8d, 0x7b, 0x87, 0x4b, 0x7f,
	0xa4, 0x4b, 0x3d, 0xa4, 0x57, 0x67, 0x54, 0x08, 0x32, 0xa5, 0x89, 0x85, 0x16, 0x94, 0xce, 0xc4,
	0x54, 0x4b, 0xfc, 0x6f, 0x4a, 0x68, 0x20, 0x7e, 0xab, 0xfd, 0x9b, 0xdc, 0xdb, 0x5b, 0xe8, 0xfe,
	0x71, 0x60, 0x4b, 0xe9, 0xa0, 0x11, 0x54, 0x92, 0x06, 0xa3, 0x96, 0xc9, 0xc8, 0xfa, 0x81, 0x70,
	0x9f, 0xe7, 0x20, 0xb4, 0x0d, 0x02, 0x8d, 0xeb, 0xfd, 0x43, 0x2f, 0x2c, 0x52, 0x66, 0xdd, 0xdd,
	0x83, 0x7f, 0xe2, 0xf4, 0x88, 0x00, 0x90, 0xdd, 0x24, 0x74, 0x98, 0x43, 0x4f, 0x15, 0xd6, 0x7d,
	0x79, 0x23, 0xac, 0x1e, 0x77, 0x0e, 0x35, 0xa3, 0x33, 0x68, 0xcf, 0xe2, 0xda, 0xdd, 0x73, 0xf7,
	0xf3, 0x41, 0x5a, 0xb9, 0x0f, 0xe5, 0xe8, 0x56, 0xa3, 0xc7, 0x16, 0xda, 0x28, 0x88, 0xfb, 0x64,
	0xcd, 0xa9, 0x16, 0x19, 0x43, 0x75, 0xf9, 0x3c, 0x20, 0x7b, 0x41, 0xe9, 0xe7, 0xc7, 0xc5, 0x79,
	0x10, 0xad, 0x39, 0x82, 0x4a, 0xf2, 0x0e, 0x66, 0xdc, 0x8a, 0xd4, 0x43, 0x9a, 0x71, 0x2b, 0xac,
	0x47, 0xf4, 0x1c, 0x6a, 0x46, 0x6d, 0x32, 0x32, 0xb4, 0x0b, 0x99, 0x91, 0x61, 0x56, 0xf3, 0x3c,
	0x80, 0x55, 0x19, 0x90, 0xfd, 0x71, 0x56, 0xcb, 0xdc, 0xbd, 0x5c, 0x4c, 0x2c, 0xdb, 0x73, 0xbe,
	0x96, 0xa3, 0xf3, 0x6f, 0x8e, 0xfa, 0x0f, 0xf1, 0xea, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0,
	0x82, 0xa2, 0xe5, 0x6c, 0x08, 0x00, 0x00,
}
