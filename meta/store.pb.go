// Code generated by protoc-gen-go.
// source: store.proto
// DO NOT EDIT!

package meta

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StoreFindUserRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *StoreFindUserRequest) Reset()                    { *m = StoreFindUserRequest{} }
func (m *StoreFindUserRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreFindUserRequest) ProtoMessage()               {}
func (*StoreFindUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type StoreFindUserResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Users  []string        `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (m *StoreFindUserResponse) Reset()                    { *m = StoreFindUserResponse{} }
func (m *StoreFindUserResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreFindUserResponse) ProtoMessage()               {}
func (*StoreFindUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *StoreFindUserResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreAddFriendRequest struct {
	From  int64          `protobuf:"varint,1,opt,name=From,json=from" json:"From,omitempty"`
	To    int64          `protobuf:"varint,2,opt,name=To,json=to" json:"To,omitempty"`
	State FriendRelation `protobuf:"varint,3,opt,name=State,json=state,enum=candy.meta.FriendRelation" json:"State,omitempty"`
	Msg   string         `protobuf:"bytes,4,opt,name=Msg,json=msg" json:"Msg,omitempty"`
}

func (m *StoreAddFriendRequest) Reset()                    { *m = StoreAddFriendRequest{} }
func (m *StoreAddFriendRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreAddFriendRequest) ProtoMessage()               {}
func (*StoreAddFriendRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

type StoreAddFriendResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	State  FriendRelation  `protobuf:"varint,2,opt,name=State,json=state,enum=candy.meta.FriendRelation" json:"State,omitempty"`
}

func (m *StoreAddFriendResponse) Reset()                    { *m = StoreAddFriendResponse{} }
func (m *StoreAddFriendResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreAddFriendResponse) ProtoMessage()               {}
func (*StoreAddFriendResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *StoreAddFriendResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreRegisterRequest struct {
	ID       int64  `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	User     string `protobuf:"bytes,2,opt,name=User,json=user" json:"User,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=Password,json=password" json:"Password,omitempty"`
}

func (m *StoreRegisterRequest) Reset()                    { *m = StoreRegisterRequest{} }
func (m *StoreRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreRegisterRequest) ProtoMessage()               {}
func (*StoreRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

type StoreRegisterResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *StoreRegisterResponse) Reset()                    { *m = StoreRegisterResponse{} }
func (m *StoreRegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreRegisterResponse) ProtoMessage()               {}
func (*StoreRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *StoreRegisterResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreUpdateUserInfoRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User,json=user" json:"User,omitempty"`
	NickName string `protobuf:"bytes,2,opt,name=NickName,json=nickName" json:"NickName,omitempty"`
	Avatar   []byte `protobuf:"bytes,3,opt,name=Avatar,json=avatar,proto3" json:"Avatar,omitempty"`
}

func (m *StoreUpdateUserInfoRequest) Reset()                    { *m = StoreUpdateUserInfoRequest{} }
func (m *StoreUpdateUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreUpdateUserInfoRequest) ProtoMessage()               {}
func (*StoreUpdateUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

type StoreUpdateUserInfoResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID,json=iD" json:"ID,omitempty"`
}

func (m *StoreUpdateUserInfoResponse) Reset()                    { *m = StoreUpdateUserInfoResponse{} }
func (m *StoreUpdateUserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreUpdateUserInfoResponse) ProtoMessage()               {}
func (*StoreUpdateUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *StoreUpdateUserInfoResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreUpdateUserPasswordRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User,json=user" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,json=password" json:"Password,omitempty"`
}

func (m *StoreUpdateUserPasswordRequest) Reset()                    { *m = StoreUpdateUserPasswordRequest{} }
func (m *StoreUpdateUserPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreUpdateUserPasswordRequest) ProtoMessage()               {}
func (*StoreUpdateUserPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

type StoreUpdateUserPasswordResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID,json=iD" json:"ID,omitempty"`
}

func (m *StoreUpdateUserPasswordResponse) Reset()                    { *m = StoreUpdateUserPasswordResponse{} }
func (m *StoreUpdateUserPasswordResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreUpdateUserPasswordResponse) ProtoMessage()               {}
func (*StoreUpdateUserPasswordResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *StoreUpdateUserPasswordResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreGetUserInfoRequest struct {
	Type     int32  `protobuf:"varint,1,opt,name=Type,json=type" json:"Type,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=UserName,json=userName" json:"UserName,omitempty"`
	UserID   int64  `protobuf:"varint,3,opt,name=UserID,json=userID" json:"UserID,omitempty"`
}

func (m *StoreGetUserInfoRequest) Reset()                    { *m = StoreGetUserInfoRequest{} }
func (m *StoreGetUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreGetUserInfoRequest) ProtoMessage()               {}
func (*StoreGetUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

type StoreGetUserInfoResponse struct {
	Header   *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID       int64           `protobuf:"varint,2,opt,name=ID,json=iD" json:"ID,omitempty"`
	User     string          `protobuf:"bytes,3,opt,name=User,json=user" json:"User,omitempty"`
	NickName string          `protobuf:"bytes,4,opt,name=NickName,json=nickName" json:"NickName,omitempty"`
	Avatar   []byte          `protobuf:"bytes,5,opt,name=Avatar,json=avatar,proto3" json:"Avatar,omitempty"`
}

func (m *StoreGetUserInfoResponse) Reset()                    { *m = StoreGetUserInfoResponse{} }
func (m *StoreGetUserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreGetUserInfoResponse) ProtoMessage()               {}
func (*StoreGetUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *StoreGetUserInfoResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreAuthRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User,json=user" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,json=password" json:"Password,omitempty"`
}

func (m *StoreAuthRequest) Reset()                    { *m = StoreAuthRequest{} }
func (m *StoreAuthRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreAuthRequest) ProtoMessage()               {}
func (*StoreAuthRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{12} }

type StoreAuthResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID,json=iD" json:"ID,omitempty"`
}

func (m *StoreAuthResponse) Reset()                    { *m = StoreAuthResponse{} }
func (m *StoreAuthResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreAuthResponse) ProtoMessage()               {}
func (*StoreAuthResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{13} }

func (m *StoreAuthResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreCreateGroupRequest struct {
	UserID    int64  `protobuf:"varint,1,opt,name=UserID,json=userID" json:"UserID,omitempty"`
	GroupID   int64  `protobuf:"varint,2,opt,name=GroupID,json=groupID" json:"GroupID,omitempty"`
	GroupName string `protobuf:"bytes,3,opt,name=GroupName,json=groupName" json:"GroupName,omitempty"`
}

func (m *StoreCreateGroupRequest) Reset()                    { *m = StoreCreateGroupRequest{} }
func (m *StoreCreateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreCreateGroupRequest) ProtoMessage()               {}
func (*StoreCreateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{14} }

type StoreCreateGroupResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *StoreCreateGroupResponse) Reset()                    { *m = StoreCreateGroupResponse{} }
func (m *StoreCreateGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreCreateGroupResponse) ProtoMessage()               {}
func (*StoreCreateGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{15} }

func (m *StoreCreateGroupResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreNewMessageRequest struct {
	Msg *Message `protobuf:"bytes,1,opt,name=Msg,json=msg" json:"Msg,omitempty"`
}

func (m *StoreNewMessageRequest) Reset()                    { *m = StoreNewMessageRequest{} }
func (m *StoreNewMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreNewMessageRequest) ProtoMessage()               {}
func (*StoreNewMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{16} }

func (m *StoreNewMessageRequest) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

type StoreNewMessageResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *StoreNewMessageResponse) Reset()                    { *m = StoreNewMessageResponse{} }
func (m *StoreNewMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreNewMessageResponse) ProtoMessage()               {}
func (*StoreNewMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{17} }

func (m *StoreNewMessageResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreUploadFileRequest struct {
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	File   []byte         `protobuf:"bytes,2,opt,name=File,json=file,proto3" json:"File,omitempty"`
}

func (m *StoreUploadFileRequest) Reset()                    { *m = StoreUploadFileRequest{} }
func (m *StoreUploadFileRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreUploadFileRequest) ProtoMessage()               {}
func (*StoreUploadFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{18} }

func (m *StoreUploadFileRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreUploadFileResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *StoreUploadFileResponse) Reset()                    { *m = StoreUploadFileResponse{} }
func (m *StoreUploadFileResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreUploadFileResponse) ProtoMessage()               {}
func (*StoreUploadFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{19} }

func (m *StoreUploadFileResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreCheckFileRequest struct {
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Names  []string       `protobuf:"bytes,2,rep,name=Names,json=names" json:"Names,omitempty"`
}

func (m *StoreCheckFileRequest) Reset()                    { *m = StoreCheckFileRequest{} }
func (m *StoreCheckFileRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreCheckFileRequest) ProtoMessage()               {}
func (*StoreCheckFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{20} }

func (m *StoreCheckFileRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreCheckFileResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Names  []string        `protobuf:"bytes,2,rep,name=Names,json=names" json:"Names,omitempty"`
}

func (m *StoreCheckFileResponse) Reset()                    { *m = StoreCheckFileResponse{} }
func (m *StoreCheckFileResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreCheckFileResponse) ProtoMessage()               {}
func (*StoreCheckFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{21} }

func (m *StoreCheckFileResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreDownloadFileRequest struct {
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Names  []string       `protobuf:"bytes,2,rep,name=Names,json=names" json:"Names,omitempty"`
}

func (m *StoreDownloadFileRequest) Reset()                    { *m = StoreDownloadFileRequest{} }
func (m *StoreDownloadFileRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreDownloadFileRequest) ProtoMessage()               {}
func (*StoreDownloadFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{22} }

func (m *StoreDownloadFileRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StoreDownloadFileResponse struct {
	Header *ResponseHeader   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Files  map[string][]byte `protobuf:"bytes,2,rep,name=Files,json=files" json:"Files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *StoreDownloadFileResponse) Reset()                    { *m = StoreDownloadFileResponse{} }
func (m *StoreDownloadFileResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreDownloadFileResponse) ProtoMessage()               {}
func (*StoreDownloadFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{23} }

func (m *StoreDownloadFileResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *StoreDownloadFileResponse) GetFiles() map[string][]byte {
	if m != nil {
		return m.Files
	}
	return nil
}

type StoreLoadMessageRequest struct {
	User    int64 `protobuf:"varint,1,opt,name=User,json=user" json:"User,omitempty"`
	ID      int64 `protobuf:"varint,2,opt,name=ID,json=iD" json:"ID,omitempty"`
	Reverse bool  `protobuf:"varint,3,opt,name=Reverse,json=reverse" json:"Reverse,omitempty"`
}

func (m *StoreLoadMessageRequest) Reset()                    { *m = StoreLoadMessageRequest{} }
func (m *StoreLoadMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreLoadMessageRequest) ProtoMessage()               {}
func (*StoreLoadMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{24} }

type StoreLoadMessageResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Msgs   []*Message      `protobuf:"bytes,2,rep,name=Msgs,json=msgs" json:"Msgs,omitempty"`
}

func (m *StoreLoadMessageResponse) Reset()                    { *m = StoreLoadMessageResponse{} }
func (m *StoreLoadMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreLoadMessageResponse) ProtoMessage()               {}
func (*StoreLoadMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{25} }

func (m *StoreLoadMessageResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *StoreLoadMessageResponse) GetMsgs() []*Message {
	if m != nil {
		return m.Msgs
	}
	return nil
}

type StoreLoadGroupListRequest struct {
	User int64 `protobuf:"varint,1,opt,name=User,json=user" json:"User,omitempty"`
}

func (m *StoreLoadGroupListRequest) Reset()                    { *m = StoreLoadGroupListRequest{} }
func (m *StoreLoadGroupListRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreLoadGroupListRequest) ProtoMessage()               {}
func (*StoreLoadGroupListRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{26} }

type StoreLoadGroupListResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Groups []*Group        `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
}

func (m *StoreLoadGroupListResponse) Reset()                    { *m = StoreLoadGroupListResponse{} }
func (m *StoreLoadGroupListResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreLoadGroupListResponse) ProtoMessage()               {}
func (*StoreLoadGroupListResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{27} }

func (m *StoreLoadGroupListResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *StoreLoadGroupListResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type StoreLoadFriendListRequest struct {
	User int64 `protobuf:"varint,1,opt,name=User,json=user" json:"User,omitempty"`
}

func (m *StoreLoadFriendListRequest) Reset()                    { *m = StoreLoadFriendListRequest{} }
func (m *StoreLoadFriendListRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreLoadFriendListRequest) ProtoMessage()               {}
func (*StoreLoadFriendListRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{28} }

type StoreLoadFriendListResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Users  []int64         `protobuf:"varint,2,rep,packed,name=users" json:"users,omitempty"`
}

func (m *StoreLoadFriendListResponse) Reset()                    { *m = StoreLoadFriendListResponse{} }
func (m *StoreLoadFriendListResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreLoadFriendListResponse) ProtoMessage()               {}
func (*StoreLoadFriendListResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{29} }

func (m *StoreLoadFriendListResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*StoreFindUserRequest)(nil), "candy.meta.StoreFindUserRequest")
	proto.RegisterType((*StoreFindUserResponse)(nil), "candy.meta.StoreFindUserResponse")
	proto.RegisterType((*StoreAddFriendRequest)(nil), "candy.meta.StoreAddFriendRequest")
	proto.RegisterType((*StoreAddFriendResponse)(nil), "candy.meta.StoreAddFriendResponse")
	proto.RegisterType((*StoreRegisterRequest)(nil), "candy.meta.StoreRegisterRequest")
	proto.RegisterType((*StoreRegisterResponse)(nil), "candy.meta.StoreRegisterResponse")
	proto.RegisterType((*StoreUpdateUserInfoRequest)(nil), "candy.meta.StoreUpdateUserInfoRequest")
	proto.RegisterType((*StoreUpdateUserInfoResponse)(nil), "candy.meta.StoreUpdateUserInfoResponse")
	proto.RegisterType((*StoreUpdateUserPasswordRequest)(nil), "candy.meta.StoreUpdateUserPasswordRequest")
	proto.RegisterType((*StoreUpdateUserPasswordResponse)(nil), "candy.meta.StoreUpdateUserPasswordResponse")
	proto.RegisterType((*StoreGetUserInfoRequest)(nil), "candy.meta.StoreGetUserInfoRequest")
	proto.RegisterType((*StoreGetUserInfoResponse)(nil), "candy.meta.StoreGetUserInfoResponse")
	proto.RegisterType((*StoreAuthRequest)(nil), "candy.meta.StoreAuthRequest")
	proto.RegisterType((*StoreAuthResponse)(nil), "candy.meta.StoreAuthResponse")
	proto.RegisterType((*StoreCreateGroupRequest)(nil), "candy.meta.StoreCreateGroupRequest")
	proto.RegisterType((*StoreCreateGroupResponse)(nil), "candy.meta.StoreCreateGroupResponse")
	proto.RegisterType((*StoreNewMessageRequest)(nil), "candy.meta.StoreNewMessageRequest")
	proto.RegisterType((*StoreNewMessageResponse)(nil), "candy.meta.StoreNewMessageResponse")
	proto.RegisterType((*StoreUploadFileRequest)(nil), "candy.meta.StoreUploadFileRequest")
	proto.RegisterType((*StoreUploadFileResponse)(nil), "candy.meta.StoreUploadFileResponse")
	proto.RegisterType((*StoreCheckFileRequest)(nil), "candy.meta.StoreCheckFileRequest")
	proto.RegisterType((*StoreCheckFileResponse)(nil), "candy.meta.StoreCheckFileResponse")
	proto.RegisterType((*StoreDownloadFileRequest)(nil), "candy.meta.StoreDownloadFileRequest")
	proto.RegisterType((*StoreDownloadFileResponse)(nil), "candy.meta.StoreDownloadFileResponse")
	proto.RegisterType((*StoreLoadMessageRequest)(nil), "candy.meta.StoreLoadMessageRequest")
	proto.RegisterType((*StoreLoadMessageResponse)(nil), "candy.meta.StoreLoadMessageResponse")
	proto.RegisterType((*StoreLoadGroupListRequest)(nil), "candy.meta.StoreLoadGroupListRequest")
	proto.RegisterType((*StoreLoadGroupListResponse)(nil), "candy.meta.StoreLoadGroupListResponse")
	proto.RegisterType((*StoreLoadFriendListRequest)(nil), "candy.meta.StoreLoadFriendListRequest")
	proto.RegisterType((*StoreLoadFriendListResponse)(nil), "candy.meta.StoreLoadFriendListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Store service

type StoreClient interface {
	Register(ctx context.Context, in *StoreRegisterRequest, opts ...grpc.CallOption) (*StoreRegisterResponse, error)
	UpdateUserInfo(ctx context.Context, in *StoreUpdateUserInfoRequest, opts ...grpc.CallOption) (*StoreUpdateUserInfoResponse, error)
	UpdateUserPassword(ctx context.Context, in *StoreUpdateUserPasswordRequest, opts ...grpc.CallOption) (*StoreUpdateUserPasswordResponse, error)
	GetUserInfo(ctx context.Context, in *StoreGetUserInfoRequest, opts ...grpc.CallOption) (*StoreGetUserInfoResponse, error)
	Auth(ctx context.Context, in *StoreAuthRequest, opts ...grpc.CallOption) (*StoreAuthResponse, error)
	// AddFriend 添加好友
	AddFriend(ctx context.Context, in *StoreAddFriendRequest, opts ...grpc.CallOption) (*StoreAddFriendResponse, error)
	// LoadFriendList 获取好友列表
	LoadFriendList(ctx context.Context, in *StoreLoadFriendListRequest, opts ...grpc.CallOption) (*StoreLoadFriendListResponse, error)
	// FindUser 根据字符串的用户名模糊查用户列表
	FindUser(ctx context.Context, in *StoreFindUserRequest, opts ...grpc.CallOption) (*StoreFindUserResponse, error)
	CreateGroup(ctx context.Context, in *StoreCreateGroupRequest, opts ...grpc.CallOption) (*StoreCreateGroupResponse, error)
	// LoadGroupList 加载群组列表
	LoadGroupList(ctx context.Context, in *StoreLoadGroupListRequest, opts ...grpc.CallOption) (*StoreLoadGroupListResponse, error)
	NewMessage(ctx context.Context, in *StoreNewMessageRequest, opts ...grpc.CallOption) (*StoreNewMessageResponse, error)
	// UploadFile 上传文件接口，一次一个文件.
	UploadFile(ctx context.Context, in *StoreUploadFileRequest, opts ...grpc.CallOption) (*StoreUploadFileResponse, error)
	// CheckFile 检测文件是否存在，文件的MD5, 服务器返回不存在的文件MD5.
	CheckFile(ctx context.Context, in *StoreCheckFileRequest, opts ...grpc.CallOption) (*StoreCheckFileResponse, error)
	// DownloadFile 下载文件，传入文件MD5，返回具体文件内容.
	DownloadFile(ctx context.Context, in *StoreDownloadFileRequest, opts ...grpc.CallOption) (*StoreDownloadFileResponse, error)
	// ID 参照消息ID，每次可逆序(旧消息)或正序(新消息)接收100条
	// 如果ID为0，就逆序返回旧的100条消息
	LoadMessage(ctx context.Context, in *StoreLoadMessageRequest, opts ...grpc.CallOption) (*StoreLoadMessageResponse, error)
}

type storeClient struct {
	cc *grpc.ClientConn
}

func NewStoreClient(cc *grpc.ClientConn) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) Register(ctx context.Context, in *StoreRegisterRequest, opts ...grpc.CallOption) (*StoreRegisterResponse, error) {
	out := new(StoreRegisterResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) UpdateUserInfo(ctx context.Context, in *StoreUpdateUserInfoRequest, opts ...grpc.CallOption) (*StoreUpdateUserInfoResponse, error) {
	out := new(StoreUpdateUserInfoResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/UpdateUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) UpdateUserPassword(ctx context.Context, in *StoreUpdateUserPasswordRequest, opts ...grpc.CallOption) (*StoreUpdateUserPasswordResponse, error) {
	out := new(StoreUpdateUserPasswordResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/UpdateUserPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetUserInfo(ctx context.Context, in *StoreGetUserInfoRequest, opts ...grpc.CallOption) (*StoreGetUserInfoResponse, error) {
	out := new(StoreGetUserInfoResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Auth(ctx context.Context, in *StoreAuthRequest, opts ...grpc.CallOption) (*StoreAuthResponse, error) {
	out := new(StoreAuthResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) AddFriend(ctx context.Context, in *StoreAddFriendRequest, opts ...grpc.CallOption) (*StoreAddFriendResponse, error) {
	out := new(StoreAddFriendResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/AddFriend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) LoadFriendList(ctx context.Context, in *StoreLoadFriendListRequest, opts ...grpc.CallOption) (*StoreLoadFriendListResponse, error) {
	out := new(StoreLoadFriendListResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/LoadFriendList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) FindUser(ctx context.Context, in *StoreFindUserRequest, opts ...grpc.CallOption) (*StoreFindUserResponse, error) {
	out := new(StoreFindUserResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/FindUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) CreateGroup(ctx context.Context, in *StoreCreateGroupRequest, opts ...grpc.CallOption) (*StoreCreateGroupResponse, error) {
	out := new(StoreCreateGroupResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) LoadGroupList(ctx context.Context, in *StoreLoadGroupListRequest, opts ...grpc.CallOption) (*StoreLoadGroupListResponse, error) {
	out := new(StoreLoadGroupListResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/LoadGroupList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) NewMessage(ctx context.Context, in *StoreNewMessageRequest, opts ...grpc.CallOption) (*StoreNewMessageResponse, error) {
	out := new(StoreNewMessageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/NewMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) UploadFile(ctx context.Context, in *StoreUploadFileRequest, opts ...grpc.CallOption) (*StoreUploadFileResponse, error) {
	out := new(StoreUploadFileResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/UploadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) CheckFile(ctx context.Context, in *StoreCheckFileRequest, opts ...grpc.CallOption) (*StoreCheckFileResponse, error) {
	out := new(StoreCheckFileResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/CheckFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) DownloadFile(ctx context.Context, in *StoreDownloadFileRequest, opts ...grpc.CallOption) (*StoreDownloadFileResponse, error) {
	out := new(StoreDownloadFileResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/DownloadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) LoadMessage(ctx context.Context, in *StoreLoadMessageRequest, opts ...grpc.CallOption) (*StoreLoadMessageResponse, error) {
	out := new(StoreLoadMessageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Store/LoadMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Store service

type StoreServer interface {
	Register(context.Context, *StoreRegisterRequest) (*StoreRegisterResponse, error)
	UpdateUserInfo(context.Context, *StoreUpdateUserInfoRequest) (*StoreUpdateUserInfoResponse, error)
	UpdateUserPassword(context.Context, *StoreUpdateUserPasswordRequest) (*StoreUpdateUserPasswordResponse, error)
	GetUserInfo(context.Context, *StoreGetUserInfoRequest) (*StoreGetUserInfoResponse, error)
	Auth(context.Context, *StoreAuthRequest) (*StoreAuthResponse, error)
	// AddFriend 添加好友
	AddFriend(context.Context, *StoreAddFriendRequest) (*StoreAddFriendResponse, error)
	// LoadFriendList 获取好友列表
	LoadFriendList(context.Context, *StoreLoadFriendListRequest) (*StoreLoadFriendListResponse, error)
	// FindUser 根据字符串的用户名模糊查用户列表
	FindUser(context.Context, *StoreFindUserRequest) (*StoreFindUserResponse, error)
	CreateGroup(context.Context, *StoreCreateGroupRequest) (*StoreCreateGroupResponse, error)
	// LoadGroupList 加载群组列表
	LoadGroupList(context.Context, *StoreLoadGroupListRequest) (*StoreLoadGroupListResponse, error)
	NewMessage(context.Context, *StoreNewMessageRequest) (*StoreNewMessageResponse, error)
	// UploadFile 上传文件接口，一次一个文件.
	UploadFile(context.Context, *StoreUploadFileRequest) (*StoreUploadFileResponse, error)
	// CheckFile 检测文件是否存在，文件的MD5, 服务器返回不存在的文件MD5.
	CheckFile(context.Context, *StoreCheckFileRequest) (*StoreCheckFileResponse, error)
	// DownloadFile 下载文件，传入文件MD5，返回具体文件内容.
	DownloadFile(context.Context, *StoreDownloadFileRequest) (*StoreDownloadFileResponse, error)
	// ID 参照消息ID，每次可逆序(旧消息)或正序(新消息)接收100条
	// 如果ID为0，就逆序返回旧的100条消息
	LoadMessage(context.Context, *StoreLoadMessageRequest) (*StoreLoadMessageResponse, error)
}

func RegisterStoreServer(s *grpc.Server, srv StoreServer) {
	s.RegisterService(&_Store_serviceDesc, srv)
}

func _Store_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Register(ctx, req.(*StoreRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreUpdateUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).UpdateUserInfo(ctx, req.(*StoreUpdateUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreUpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/UpdateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).UpdateUserPassword(ctx, req.(*StoreUpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreGetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetUserInfo(ctx, req.(*StoreGetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Auth(ctx, req.(*StoreAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreAddFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).AddFriend(ctx, req.(*StoreAddFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_LoadFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreLoadFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).LoadFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/LoadFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).LoadFriendList(ctx, req.(*StoreLoadFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_FindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreFindUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).FindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/FindUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).FindUser(ctx, req.(*StoreFindUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreCreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).CreateGroup(ctx, req.(*StoreCreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_LoadGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreLoadGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).LoadGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/LoadGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).LoadGroupList(ctx, req.(*StoreLoadGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_NewMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreNewMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).NewMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/NewMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).NewMessage(ctx, req.(*StoreNewMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreUploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).UploadFile(ctx, req.(*StoreUploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_CheckFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreCheckFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).CheckFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/CheckFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).CheckFile(ctx, req.(*StoreCheckFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreDownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).DownloadFile(ctx, req.(*StoreDownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_LoadMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreLoadMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).LoadMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Store/LoadMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).LoadMessage(ctx, req.(*StoreLoadMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Store_serviceDesc = grpc.ServiceDesc{
	ServiceName: "candy.meta.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Store_Register_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _Store_UpdateUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _Store_UpdateUserPassword_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Store_GetUserInfo_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Store_Auth_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _Store_AddFriend_Handler,
		},
		{
			MethodName: "LoadFriendList",
			Handler:    _Store_LoadFriendList_Handler,
		},
		{
			MethodName: "FindUser",
			Handler:    _Store_FindUser_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Store_CreateGroup_Handler,
		},
		{
			MethodName: "LoadGroupList",
			Handler:    _Store_LoadGroupList_Handler,
		},
		{
			MethodName: "NewMessage",
			Handler:    _Store_NewMessage_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _Store_UploadFile_Handler,
		},
		{
			MethodName: "CheckFile",
			Handler:    _Store_CheckFile_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _Store_DownloadFile_Handler,
		},
		{
			MethodName: "LoadMessage",
			Handler:    _Store_LoadMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor4,
}

func init() { proto.RegisterFile("store.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 1077 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x58, 0xe1, 0x6e, 0xdb, 0x36,
	0x10, 0x86, 0x65, 0xd9, 0xb1, 0xcf, 0x59, 0xd0, 0x72, 0x59, 0xe7, 0x6a, 0xdd, 0x96, 0xb1, 0x4d,
	0x9b, 0x75, 0x80, 0x97, 0x65, 0x7f, 0x8a, 0xfd, 0x19, 0xda, 0x64, 0xee, 0x8a, 0x35, 0x69, 0xa1,
	0xd6, 0x6b, 0xb1, 0x01, 0xdb, 0x58, 0x8b, 0x71, 0x84, 0x58, 0xa2, 0x27, 0xca, 0x09, 0x8c, 0x01,
	0xdb, 0xdb, 0xec, 0x49, 0xf6, 0x02, 0x7b, 0xa3, 0x82, 0x14, 0x25, 0xd1, 0x12, 0x6d, 0x07, 0x91,
	0xff, 0x99, 0xd2, 0xf1, 0xbb, 0x8f, 0x77, 0xc7, 0xbb, 0x4f, 0x86, 0x0e, 0x8f, 0x59, 0x44, 0x7b,
	0x93, 0x88, 0xc5, 0x0c, 0xc1, 0x90, 0x84, 0xde, 0xac, 0x17, 0xd0, 0x98, 0x38, 0x9b, 0x43, 0x16,
	0x04, 0x2c, 0x4c, 0xde, 0xe0, 0x87, 0xb0, 0xfd, 0x4a, 0x18, 0xf6, 0xfd, 0xd0, 0x1b, 0x70, 0x1a,
	0xb9, 0xf4, 0xcf, 0x29, 0xe5, 0x31, 0x42, 0x60, 0x4f, 0x39, 0x8d, 0xba, 0xb5, 0x9d, 0xda, 0x5e,
	0xdb, 0x95, 0xbf, 0x31, 0x81, 0x8f, 0x0a, 0xb6, 0x7c, 0xc2, 0x42, 0x4e, 0xd1, 0x01, 0x34, 0xcf,
	0x28, 0xf1, 0x94, 0x79, 0xe7, 0xc0, 0xe9, 0xe5, 0xfe, 0x7a, 0xa9, 0xd5, 0x8f, 0xd2, 0xc2, 0x55,
	0x96, 0x68, 0x1b, 0x1a, 0x02, 0x94, 0x77, 0xad, 0x9d, 0xfa, 0x5e, 0xdb, 0x4d, 0x16, 0xf8, 0x1f,
	0xe5, 0xe2, 0xb1, 0xe7, 0xf5, 0x23, 0x9f, 0x86, 0x9e, 0xc6, 0xa7, 0x1f, 0xb1, 0x40, 0x3a, 0xa8,
	0xbb, 0xf6, 0x69, 0xc4, 0x02, 0xb4, 0x05, 0xd6, 0x6b, 0xd6, 0xb5, 0xe4, 0x13, 0x2b, 0x66, 0x68,
	0x1f, 0x1a, 0xaf, 0x62, 0x12, 0xd3, 0x6e, 0x7d, 0xa7, 0xb6, 0xb7, 0x35, 0xcf, 0x22, 0x45, 0x1b,
	0x93, 0xd8, 0x67, 0xa1, 0xdb, 0xe0, 0xc2, 0x10, 0xdd, 0x80, 0xfa, 0x31, 0x1f, 0x75, 0x6d, 0x79,
	0xc8, 0x7a, 0xc0, 0x47, 0xf8, 0x6f, 0xb8, 0x55, 0x24, 0x50, 0xe1, 0x90, 0x19, 0x23, 0xeb, 0x8a,
	0x8c, 0xf0, 0xcf, 0x2a, 0x1f, 0x2e, 0x1d, 0xf9, 0x3c, 0xce, 0xf3, 0xb1, 0x05, 0xd6, 0xb3, 0x23,
	0x75, 0x7a, 0xcb, 0x3f, 0x12, 0xf1, 0x10, 0x29, 0x90, 0xc0, 0x2a, 0x3f, 0xc8, 0x81, 0xd6, 0x4b,
	0xc2, 0xf9, 0x25, 0x8b, 0x3c, 0x19, 0x82, 0xb6, 0xdb, 0x9a, 0xa8, 0x35, 0xfe, 0x49, 0x05, 0x36,
	0xc7, 0xbd, 0xfe, 0xb1, 0xb0, 0x07, 0x8e, 0x04, 0x1b, 0x4c, 0x3c, 0x12, 0x53, 0xc1, 0xe3, 0x59,
	0x78, 0xca, 0xb4, 0x54, 0x0d, 0x0a, 0xa5, 0x23, 0xa8, 0x9d, 0xf8, 0xc3, 0xf3, 0x13, 0x12, 0x50,
	0x45, 0xb9, 0x15, 0xaa, 0x35, 0xba, 0x05, 0xcd, 0xc7, 0x17, 0x24, 0x26, 0x91, 0x24, 0xbd, 0xe9,
	0x36, 0x89, 0x5c, 0x61, 0x02, 0x9f, 0x18, 0xbd, 0x54, 0xc8, 0x47, 0x12, 0x45, 0x2b, 0x8d, 0x22,
	0x7e, 0x09, 0x9f, 0x15, 0x5c, 0xa4, 0x01, 0x5c, 0x71, 0x98, 0x2c, 0xce, 0x56, 0x21, 0xce, 0x14,
	0x3e, 0x5f, 0x88, 0xb8, 0x46, 0xe2, 0x04, 0x3e, 0x96, 0x6e, 0x9e, 0xd2, 0xd8, 0x10, 0xfe, 0xd7,
	0xb3, 0x09, 0x95, 0xe0, 0x0d, 0xd7, 0x8e, 0x67, 0x13, 0x2a, 0x18, 0x0b, 0x33, 0x3d, 0xfc, 0x53,
	0xb5, 0x16, 0xe1, 0x97, 0x10, 0x47, 0x32, 0xfc, 0x75, 0xb7, 0x39, 0x95, 0x2b, 0xfc, 0x6f, 0x0d,
	0xba, 0x65, 0x1f, 0xeb, 0x3b, 0x43, 0x16, 0xda, 0xfa, 0x82, 0x3a, 0xb1, 0x17, 0xd6, 0x49, 0x63,
	0xae, 0x4e, 0x9e, 0xc0, 0x8d, 0xe4, 0xca, 0x4e, 0xe3, 0xb3, 0xeb, 0xa6, 0xed, 0x0d, 0xdc, 0xd4,
	0x30, 0xd6, 0x98, 0x28, 0x5f, 0x25, 0xea, 0x30, 0xa2, 0x24, 0xa6, 0x4f, 0x23, 0x36, 0x9d, 0xa4,
	0x1c, 0xf3, 0xc0, 0xd7, 0xf4, 0xc0, 0xa3, 0x2e, 0x6c, 0x48, 0xbb, 0x0c, 0x67, 0x63, 0x94, 0x2c,
	0xd1, 0x1d, 0x68, 0xcb, 0x37, 0x32, 0x3c, 0x49, 0xd8, 0xda, 0xa3, 0xf4, 0x01, 0x3e, 0x51, 0xf9,
	0x9a, 0x73, 0x55, 0xe1, 0x96, 0x7f, 0xaf, 0x5a, 0xe1, 0x09, 0xbd, 0x3c, 0xa6, 0x9c, 0x93, 0x11,
	0x4d, 0x99, 0xef, 0x26, 0x6d, 0x33, 0x81, 0xfa, 0x50, 0x87, 0x4a, 0x0d, 0x65, 0x2f, 0x3d, 0x56,
	0x67, 0xd7, 0x01, 0x2a, 0xf0, 0xf9, 0x5d, 0xf1, 0x19, 0x4c, 0xc6, 0x8c, 0x78, 0x7d, 0x7f, 0x9c,
	0xf1, 0xf9, 0xa6, 0x80, 0x76, 0x7b, 0x1e, 0x4d, 0x1a, 0x15, 0xf2, 0x24, 0xe6, 0x89, 0x3f, 0x4e,
	0x6e, 0xc3, 0xa6, 0x6b, 0x9f, 0xfa, 0x63, 0x9a, 0xf1, 0xd5, 0x1d, 0x54, 0xe0, 0xfb, 0x87, 0x6a,
	0xb9, 0x87, 0x67, 0x74, 0x78, 0x5e, 0x91, 0xee, 0x36, 0x34, 0x44, 0x8e, 0xb3, 0x69, 0x19, 0x8a,
	0x05, 0x7e, 0xa7, 0x22, 0xa2, 0x79, 0xa8, 0x36, 0x91, 0x0d, 0x3e, 0x86, 0xaa, 0xaa, 0x8e, 0xd8,
	0x65, 0xb8, 0x86, 0xb8, 0x9b, 0x9d, 0xfc, 0x5f, 0x83, 0xdb, 0x06, 0x2f, 0x15, 0x0e, 0xd3, 0x87,
	0x86, 0xc0, 0x48, 0xfc, 0x74, 0x0e, 0xf6, 0xf5, 0x2d, 0x0b, 0x3d, 0xf5, 0xe4, 0x96, 0x1f, 0xc2,
	0x38, 0x9a, 0xb9, 0x0d, 0x51, 0x12, 0xdc, 0x79, 0x04, 0x90, 0x3f, 0x14, 0x7a, 0xe1, 0x9c, 0xce,
	0x54, 0x57, 0x11, 0x3f, 0xc5, 0x79, 0x2e, 0xc8, 0x78, 0x9a, 0x16, 0x52, 0xb2, 0xf8, 0xce, 0x7a,
	0x54, 0xc3, 0x6f, 0x54, 0x35, 0x3d, 0x67, 0xc4, 0x2b, 0xdc, 0x1f, 0xbd, 0x3b, 0xd5, 0x55, 0x77,
	0x2a, 0x76, 0xc7, 0x2e, 0x6c, 0xb8, 0xf4, 0x82, 0x46, 0x3c, 0xb9, 0xe9, 0x2d, 0x77, 0x23, 0x4a,
	0x96, 0xf8, 0x52, 0x65, 0x64, 0x0e, 0xb8, 0x42, 0xa8, 0x1e, 0x80, 0x7d, 0xcc, 0x47, 0x69, 0xa4,
	0x8c, 0xd7, 0xd9, 0x0e, 0xf8, 0x88, 0xe3, 0xaf, 0x55, 0x92, 0x84, 0x63, 0xd9, 0x5e, 0x9e, 0xfb,
	0x3c, 0x5e, 0x72, 0x26, 0xfc, 0x97, 0xd2, 0x09, 0x85, 0x0d, 0x15, 0xb8, 0x7e, 0x09, 0x4d, 0xd9,
	0xf0, 0x52, 0xb6, 0x37, 0xf5, 0x3d, 0x49, 0xcb, 0x53, 0x06, 0x78, 0x5f, 0x73, 0x9e, 0x68, 0xad,
	0x55, 0x74, 0x47, 0x4a, 0x70, 0x14, 0x77, 0xac, 0x4b, 0xe5, 0xd6, 0x95, 0xca, 0x3d, 0xf8, 0x0f,
	0x84, 0x2e, 0x64, 0x11, 0x45, 0x2f, 0xa0, 0x95, 0x2a, 0x32, 0xb4, 0x53, 0xaa, 0xd1, 0x82, 0x08,
	0x74, 0xbe, 0x58, 0x62, 0xa1, 0x48, 0x12, 0xd8, 0x9a, 0xd7, 0x4b, 0xe8, 0x7e, 0x69, 0x93, 0x51,
	0xb6, 0x39, 0x0f, 0x56, 0xda, 0x29, 0x17, 0x01, 0xa0, 0xb2, 0xba, 0x41, 0x0f, 0x97, 0x6c, 0x2f,
	0x88, 0x2a, 0xe7, 0xab, 0x2b, 0xd9, 0x2a, 0x77, 0x6f, 0xa1, 0xa3, 0x29, 0x10, 0x74, 0xb7, 0xb4,
	0xb7, 0xac, 0x81, 0x9c, 0x7b, 0xcb, 0x8d, 0x14, 0xf2, 0x21, 0xd8, 0x62, 0xde, 0xa3, 0x3b, 0x25,
	0x6b, 0x4d, 0x4a, 0x38, 0x9f, 0x2e, 0x78, 0xab, 0x40, 0x5c, 0x68, 0x67, 0xdf, 0x0a, 0xa8, 0x9c,
	0xa0, 0xe2, 0x87, 0x8c, 0x83, 0x97, 0x99, 0xe4, 0x49, 0x9c, 0xaf, 0x41, 0x43, 0x12, 0x8d, 0x65,
	0x6d, 0x48, 0xe2, 0x82, 0x62, 0x7e, 0x01, 0xad, 0xf4, 0x33, 0xce, 0x50, 0x78, 0x85, 0xaf, 0x41,
	0x43, 0xe1, 0x95, 0xbe, 0x01, 0xdf, 0x42, 0x47, 0x13, 0x1e, 0x86, 0x34, 0x95, 0x15, 0x90, 0x21,
	0x4d, 0x26, 0xed, 0xf2, 0x1b, 0x7c, 0x30, 0xd7, 0x40, 0xd0, 0xae, 0xf1, 0x90, 0xc5, 0x8e, 0xe4,
	0xdc, 0x5f, 0x65, 0xa6, 0xf0, 0x07, 0x00, 0xb9, 0x42, 0x41, 0xe5, 0xfc, 0x94, 0xf4, 0x8f, 0x73,
	0x77, 0xa9, 0x4d, 0x0e, 0x9b, 0x0b, 0x09, 0x03, 0x6c, 0x49, 0xc6, 0x18, 0x60, 0x0d, 0x4a, 0xc4,
	0x85, 0x76, 0x36, 0xee, 0x0d, 0xf5, 0x56, 0x14, 0x1b, 0x86, 0x7a, 0x2b, 0xab, 0x85, 0x5f, 0x61,
	0x53, 0x1f, 0x87, 0xe8, 0xde, 0x8a, 0x69, 0x99, 0x20, 0xef, 0x5e, 0x69, 0xa6, 0x8a, 0xc2, 0xd0,
	0x26, 0x95, 0xa1, 0x30, 0xca, 0x03, 0xd2, 0x50, 0x18, 0x86, 0x61, 0xf7, 0xa4, 0xf9, 0x8b, 0x2d,
	0x0c, 0xde, 0x35, 0xe5, 0x5f, 0x19, 0xdf, 0xbe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x42, 0xde,
	0x77, 0xf3, 0x10, 0x00, 0x00,
}
