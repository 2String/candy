// Code generated by protoc-gen-go.
// source: gate.proto
// DO NOT EDIT!

package meta

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GateFindUserRequest struct {
	User string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
}

func (m *GateFindUserRequest) Reset()                    { *m = GateFindUserRequest{} }
func (m *GateFindUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GateFindUserRequest) ProtoMessage()               {}
func (*GateFindUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type GateFindUserResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Users  []string        `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (m *GateFindUserResponse) Reset()                    { *m = GateFindUserResponse{} }
func (m *GateFindUserResponse) String() string            { return proto.CompactTextString(m) }
func (*GateFindUserResponse) ProtoMessage()               {}
func (*GateFindUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GateFindUserResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateAddFriendRequest struct {
	UserID  int64  `protobuf:"varint,1,opt,name=UserID" json:"UserID,omitempty"`
	Confirm bool   `protobuf:"varint,2,opt,name=Confirm" json:"Confirm,omitempty"`
	Msg     string `protobuf:"bytes,3,opt,name=Msg" json:"Msg,omitempty"`
}

func (m *GateAddFriendRequest) Reset()                    { *m = GateAddFriendRequest{} }
func (m *GateAddFriendRequest) String() string            { return proto.CompactTextString(m) }
func (*GateAddFriendRequest) ProtoMessage()               {}
func (*GateAddFriendRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type GateAddFriendResponse struct {
	Header  *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Confirm bool            `protobuf:"varint,2,opt,name=Confirm" json:"Confirm,omitempty"`
}

func (m *GateAddFriendResponse) Reset()                    { *m = GateAddFriendResponse{} }
func (m *GateAddFriendResponse) String() string            { return proto.CompactTextString(m) }
func (*GateAddFriendResponse) ProtoMessage()               {}
func (*GateAddFriendResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GateAddFriendResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateCreateGroupRequest struct {
	GroupName string `protobuf:"bytes,1,opt,name=GroupName" json:"GroupName,omitempty"`
}

func (m *GateCreateGroupRequest) Reset()                    { *m = GateCreateGroupRequest{} }
func (m *GateCreateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GateCreateGroupRequest) ProtoMessage()               {}
func (*GateCreateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type GateCreateGroupResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *GateCreateGroupResponse) Reset()                    { *m = GateCreateGroupResponse{} }
func (m *GateCreateGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*GateCreateGroupResponse) ProtoMessage()               {}
func (*GateCreateGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *GateCreateGroupResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateRegisterRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *GateRegisterRequest) Reset()                    { *m = GateRegisterRequest{} }
func (m *GateRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*GateRegisterRequest) ProtoMessage()               {}
func (*GateRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type GateRegisterResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *GateRegisterResponse) Reset()                    { *m = GateRegisterResponse{} }
func (m *GateRegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*GateRegisterResponse) ProtoMessage()               {}
func (*GateRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *GateRegisterResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateUpdateUserInfoRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	NickName string `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty"`
	Avatar   []byte `protobuf:"bytes,3,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
}

func (m *GateUpdateUserInfoRequest) Reset()                    { *m = GateUpdateUserInfoRequest{} }
func (m *GateUpdateUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUpdateUserInfoRequest) ProtoMessage()               {}
func (*GateUpdateUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

type GateUpdateUserInfoResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *GateUpdateUserInfoResponse) Reset()                    { *m = GateUpdateUserInfoResponse{} }
func (m *GateUpdateUserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUpdateUserInfoResponse) ProtoMessage()               {}
func (*GateUpdateUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *GateUpdateUserInfoResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateUpdateUserPasswordRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *GateUpdateUserPasswordRequest) Reset()                    { *m = GateUpdateUserPasswordRequest{} }
func (m *GateUpdateUserPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUpdateUserPasswordRequest) ProtoMessage()               {}
func (*GateUpdateUserPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

type GateUpdateUserPasswordResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *GateUpdateUserPasswordResponse) Reset()                    { *m = GateUpdateUserPasswordResponse{} }
func (m *GateUpdateUserPasswordResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUpdateUserPasswordResponse) ProtoMessage()               {}
func (*GateUpdateUserPasswordResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *GateUpdateUserPasswordResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateGetUserInfoRequest struct {
	User string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
}

func (m *GateGetUserInfoRequest) Reset()                    { *m = GateGetUserInfoRequest{} }
func (m *GateGetUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GateGetUserInfoRequest) ProtoMessage()               {}
func (*GateGetUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

type GateGetUserInfoResponse struct {
	Header   *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID       int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
	User     string          `protobuf:"bytes,3,opt,name=User" json:"User,omitempty"`
	NickName string          `protobuf:"bytes,4,opt,name=NickName" json:"NickName,omitempty"`
	Avatar   []byte          `protobuf:"bytes,5,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
}

func (m *GateGetUserInfoResponse) Reset()                    { *m = GateGetUserInfoResponse{} }
func (m *GateGetUserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GateGetUserInfoResponse) ProtoMessage()               {}
func (*GateGetUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *GateGetUserInfoResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateHeartbeatRequest struct {
}

func (m *GateHeartbeatRequest) Reset()                    { *m = GateHeartbeatRequest{} }
func (m *GateHeartbeatRequest) String() string            { return proto.CompactTextString(m) }
func (*GateHeartbeatRequest) ProtoMessage()               {}
func (*GateHeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

type GateHeartbeatResponse struct {
}

func (m *GateHeartbeatResponse) Reset()                    { *m = GateHeartbeatResponse{} }
func (m *GateHeartbeatResponse) String() string            { return proto.CompactTextString(m) }
func (*GateHeartbeatResponse) ProtoMessage()               {}
func (*GateHeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

type GateUserLoginRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *GateUserLoginRequest) Reset()                    { *m = GateUserLoginRequest{} }
func (m *GateUserLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUserLoginRequest) ProtoMessage()               {}
func (*GateUserLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

type GateUserLoginResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *GateUserLoginResponse) Reset()                    { *m = GateUserLoginResponse{} }
func (m *GateUserLoginResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUserLoginResponse) ProtoMessage()               {}
func (*GateUserLoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *GateUserLoginResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateUserLogoutRequest struct {
	User string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
}

func (m *GateUserLogoutRequest) Reset()                    { *m = GateUserLogoutRequest{} }
func (m *GateUserLogoutRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUserLogoutRequest) ProtoMessage()               {}
func (*GateUserLogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

type GateUserLogoutResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GateUserLogoutResponse) Reset()                    { *m = GateUserLogoutResponse{} }
func (m *GateUserLogoutResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUserLogoutResponse) ProtoMessage()               {}
func (*GateUserLogoutResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *GateUserLogoutResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateUploadFileRequest struct {
	File []byte `protobuf:"bytes,1,opt,name=File,proto3" json:"File,omitempty"`
}

func (m *GateUploadFileRequest) Reset()                    { *m = GateUploadFileRequest{} }
func (m *GateUploadFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUploadFileRequest) ProtoMessage()               {}
func (*GateUploadFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

type GateUploadFileResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GateUploadFileResponse) Reset()                    { *m = GateUploadFileResponse{} }
func (m *GateUploadFileResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUploadFileResponse) ProtoMessage()               {}
func (*GateUploadFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *GateUploadFileResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateCheckFileRequest struct {
	Names []string `protobuf:"bytes,1,rep,name=Names" json:"Names,omitempty"`
}

func (m *GateCheckFileRequest) Reset()                    { *m = GateCheckFileRequest{} }
func (m *GateCheckFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GateCheckFileRequest) ProtoMessage()               {}
func (*GateCheckFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

type GateCheckFileResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Names  []string        `protobuf:"bytes,2,rep,name=Names" json:"Names,omitempty"`
}

func (m *GateCheckFileResponse) Reset()                    { *m = GateCheckFileResponse{} }
func (m *GateCheckFileResponse) String() string            { return proto.CompactTextString(m) }
func (*GateCheckFileResponse) ProtoMessage()               {}
func (*GateCheckFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *GateCheckFileResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateDownloadFileRequest struct {
	Names []string `protobuf:"bytes,1,rep,name=Names" json:"Names,omitempty"`
}

func (m *GateDownloadFileRequest) Reset()                    { *m = GateDownloadFileRequest{} }
func (m *GateDownloadFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GateDownloadFileRequest) ProtoMessage()               {}
func (*GateDownloadFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

type GateDownloadFileResponse struct {
	Header *ResponseHeader   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Files  map[string][]byte `protobuf:"bytes,2,rep,name=Files" json:"Files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GateDownloadFileResponse) Reset()                    { *m = GateDownloadFileResponse{} }
func (m *GateDownloadFileResponse) String() string            { return proto.CompactTextString(m) }
func (*GateDownloadFileResponse) ProtoMessage()               {}
func (*GateDownloadFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *GateDownloadFileResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GateDownloadFileResponse) GetFiles() map[string][]byte {
	if m != nil {
		return m.Files
	}
	return nil
}

type GateNoticeRequest struct {
	ChannelID int64    `protobuf:"varint,1,opt,name=ChannelID" json:"ChannelID,omitempty"`
	Msg       *Message `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
}

func (m *GateNoticeRequest) Reset()                    { *m = GateNoticeRequest{} }
func (m *GateNoticeRequest) String() string            { return proto.CompactTextString(m) }
func (*GateNoticeRequest) ProtoMessage()               {}
func (*GateNoticeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *GateNoticeRequest) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

type GateNoticeResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GateNoticeResponse) Reset()                    { *m = GateNoticeResponse{} }
func (m *GateNoticeResponse) String() string            { return proto.CompactTextString(m) }
func (*GateNoticeResponse) ProtoMessage()               {}
func (*GateNoticeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *GateNoticeResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateLoadMessageRequest struct {
	ID      int64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Reverse bool  `protobuf:"varint,2,opt,name=Reverse" json:"Reverse,omitempty"`
}

func (m *GateLoadMessageRequest) Reset()                    { *m = GateLoadMessageRequest{} }
func (m *GateLoadMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*GateLoadMessageRequest) ProtoMessage()               {}
func (*GateLoadMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

type GateLoadMessageResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Msgs   []*Message      `protobuf:"bytes,2,rep,name=Msgs" json:"Msgs,omitempty"`
}

func (m *GateLoadMessageResponse) Reset()                    { *m = GateLoadMessageResponse{} }
func (m *GateLoadMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*GateLoadMessageResponse) ProtoMessage()               {}
func (*GateLoadMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *GateLoadMessageResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GateLoadMessageResponse) GetMsgs() []*Message {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func init() {
	proto.RegisterType((*GateFindUserRequest)(nil), "candy.meta.GateFindUserRequest")
	proto.RegisterType((*GateFindUserResponse)(nil), "candy.meta.GateFindUserResponse")
	proto.RegisterType((*GateAddFriendRequest)(nil), "candy.meta.GateAddFriendRequest")
	proto.RegisterType((*GateAddFriendResponse)(nil), "candy.meta.GateAddFriendResponse")
	proto.RegisterType((*GateCreateGroupRequest)(nil), "candy.meta.GateCreateGroupRequest")
	proto.RegisterType((*GateCreateGroupResponse)(nil), "candy.meta.GateCreateGroupResponse")
	proto.RegisterType((*GateRegisterRequest)(nil), "candy.meta.GateRegisterRequest")
	proto.RegisterType((*GateRegisterResponse)(nil), "candy.meta.GateRegisterResponse")
	proto.RegisterType((*GateUpdateUserInfoRequest)(nil), "candy.meta.GateUpdateUserInfoRequest")
	proto.RegisterType((*GateUpdateUserInfoResponse)(nil), "candy.meta.GateUpdateUserInfoResponse")
	proto.RegisterType((*GateUpdateUserPasswordRequest)(nil), "candy.meta.GateUpdateUserPasswordRequest")
	proto.RegisterType((*GateUpdateUserPasswordResponse)(nil), "candy.meta.GateUpdateUserPasswordResponse")
	proto.RegisterType((*GateGetUserInfoRequest)(nil), "candy.meta.GateGetUserInfoRequest")
	proto.RegisterType((*GateGetUserInfoResponse)(nil), "candy.meta.GateGetUserInfoResponse")
	proto.RegisterType((*GateHeartbeatRequest)(nil), "candy.meta.GateHeartbeatRequest")
	proto.RegisterType((*GateHeartbeatResponse)(nil), "candy.meta.GateHeartbeatResponse")
	proto.RegisterType((*GateUserLoginRequest)(nil), "candy.meta.GateUserLoginRequest")
	proto.RegisterType((*GateUserLoginResponse)(nil), "candy.meta.GateUserLoginResponse")
	proto.RegisterType((*GateUserLogoutRequest)(nil), "candy.meta.GateUserLogoutRequest")
	proto.RegisterType((*GateUserLogoutResponse)(nil), "candy.meta.GateUserLogoutResponse")
	proto.RegisterType((*GateUploadFileRequest)(nil), "candy.meta.GateUploadFileRequest")
	proto.RegisterType((*GateUploadFileResponse)(nil), "candy.meta.GateUploadFileResponse")
	proto.RegisterType((*GateCheckFileRequest)(nil), "candy.meta.GateCheckFileRequest")
	proto.RegisterType((*GateCheckFileResponse)(nil), "candy.meta.GateCheckFileResponse")
	proto.RegisterType((*GateDownloadFileRequest)(nil), "candy.meta.GateDownloadFileRequest")
	proto.RegisterType((*GateDownloadFileResponse)(nil), "candy.meta.GateDownloadFileResponse")
	proto.RegisterType((*GateNoticeRequest)(nil), "candy.meta.GateNoticeRequest")
	proto.RegisterType((*GateNoticeResponse)(nil), "candy.meta.GateNoticeResponse")
	proto.RegisterType((*GateLoadMessageRequest)(nil), "candy.meta.GateLoadMessageRequest")
	proto.RegisterType((*GateLoadMessageResponse)(nil), "candy.meta.GateLoadMessageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Gate service

type GateClient interface {
	Register(ctx context.Context, in *GateRegisterRequest, opts ...grpc.CallOption) (*GateRegisterResponse, error)
	UpdateUserInfo(ctx context.Context, in *GateUpdateUserInfoRequest, opts ...grpc.CallOption) (*GateUpdateUserInfoResponse, error)
	UpdateUserPassword(ctx context.Context, in *GateUpdateUserPasswordRequest, opts ...grpc.CallOption) (*GateUpdateUserPasswordResponse, error)
	GetUserInfo(ctx context.Context, in *GateGetUserInfoRequest, opts ...grpc.CallOption) (*GateGetUserInfoResponse, error)
	Login(ctx context.Context, in *GateUserLoginRequest, opts ...grpc.CallOption) (*GateUserLoginResponse, error)
	Logout(ctx context.Context, in *GateUserLogoutRequest, opts ...grpc.CallOption) (*GateUserLogoutResponse, error)
	MessageStream(ctx context.Context, opts ...grpc.CallOption) (Gate_MessageStreamClient, error)
	// AddFriend 添加好友或确认接受添加.
	AddFriend(ctx context.Context, in *GateAddFriendRequest, opts ...grpc.CallOption) (*GateAddFriendResponse, error)
	// FindUser 添加好友前先查找出来对应的ID.
	FindUser(ctx context.Context, in *GateFindUserRequest, opts ...grpc.CallOption) (*GateFindUserResponse, error)
	CreateGroup(ctx context.Context, in *GateCreateGroupRequest, opts ...grpc.CallOption) (*GateCreateGroupResponse, error)
	Heartbeat(ctx context.Context, in *GateHeartbeatRequest, opts ...grpc.CallOption) (*GateHeartbeatResponse, error)
	// UploadFile 客户端上传文件接口，一次一个图片.
	UploadFile(ctx context.Context, in *GateUploadFileRequest, opts ...grpc.CallOption) (*GateUploadFileResponse, error)
	// CheckFile 客户端检测文件是否存在，文件的临时ID和md5, 服务器返回不存在的文件ID.
	CheckFile(ctx context.Context, in *GateCheckFileRequest, opts ...grpc.CallOption) (*GateCheckFileResponse, error)
	// DownloadFile 客户端下载文件，传入ID，返回具体文件内容.
	DownloadFile(ctx context.Context, in *GateDownloadFileRequest, opts ...grpc.CallOption) (*GateDownloadFileResponse, error)
	// ID 参照消息ID，每次可逆序(旧消息)或正序(新消息)接收100条
	// 如果ID为0，就逆序返回旧的100条消息
	LoadMessage(ctx context.Context, in *GateLoadMessageRequest, opts ...grpc.CallOption) (*GateLoadMessageResponse, error)
	// Notice 服务端向客户端推送接口.
	Notice(ctx context.Context, in *GateNoticeRequest, opts ...grpc.CallOption) (*GateNoticeResponse, error)
}

type gateClient struct {
	cc *grpc.ClientConn
}

func NewGateClient(cc *grpc.ClientConn) GateClient {
	return &gateClient{cc}
}

func (c *gateClient) Register(ctx context.Context, in *GateRegisterRequest, opts ...grpc.CallOption) (*GateRegisterResponse, error) {
	out := new(GateRegisterResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) UpdateUserInfo(ctx context.Context, in *GateUpdateUserInfoRequest, opts ...grpc.CallOption) (*GateUpdateUserInfoResponse, error) {
	out := new(GateUpdateUserInfoResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/UpdateUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) UpdateUserPassword(ctx context.Context, in *GateUpdateUserPasswordRequest, opts ...grpc.CallOption) (*GateUpdateUserPasswordResponse, error) {
	out := new(GateUpdateUserPasswordResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/UpdateUserPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) GetUserInfo(ctx context.Context, in *GateGetUserInfoRequest, opts ...grpc.CallOption) (*GateGetUserInfoResponse, error) {
	out := new(GateGetUserInfoResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Login(ctx context.Context, in *GateUserLoginRequest, opts ...grpc.CallOption) (*GateUserLoginResponse, error) {
	out := new(GateUserLoginResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Logout(ctx context.Context, in *GateUserLogoutRequest, opts ...grpc.CallOption) (*GateUserLogoutResponse, error) {
	out := new(GateUserLogoutResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) MessageStream(ctx context.Context, opts ...grpc.CallOption) (Gate_MessageStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Gate_serviceDesc.Streams[0], c.cc, "/candy.meta.Gate/MessageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gateMessageStreamClient{stream}
	return x, nil
}

type Gate_MessageStreamClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type gateMessageStreamClient struct {
	grpc.ClientStream
}

func (x *gateMessageStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gateMessageStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gateClient) AddFriend(ctx context.Context, in *GateAddFriendRequest, opts ...grpc.CallOption) (*GateAddFriendResponse, error) {
	out := new(GateAddFriendResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/AddFriend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) FindUser(ctx context.Context, in *GateFindUserRequest, opts ...grpc.CallOption) (*GateFindUserResponse, error) {
	out := new(GateFindUserResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/FindUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) CreateGroup(ctx context.Context, in *GateCreateGroupRequest, opts ...grpc.CallOption) (*GateCreateGroupResponse, error) {
	out := new(GateCreateGroupResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Heartbeat(ctx context.Context, in *GateHeartbeatRequest, opts ...grpc.CallOption) (*GateHeartbeatResponse, error) {
	out := new(GateHeartbeatResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) UploadFile(ctx context.Context, in *GateUploadFileRequest, opts ...grpc.CallOption) (*GateUploadFileResponse, error) {
	out := new(GateUploadFileResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/UploadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) CheckFile(ctx context.Context, in *GateCheckFileRequest, opts ...grpc.CallOption) (*GateCheckFileResponse, error) {
	out := new(GateCheckFileResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/CheckFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) DownloadFile(ctx context.Context, in *GateDownloadFileRequest, opts ...grpc.CallOption) (*GateDownloadFileResponse, error) {
	out := new(GateDownloadFileResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/DownloadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) LoadMessage(ctx context.Context, in *GateLoadMessageRequest, opts ...grpc.CallOption) (*GateLoadMessageResponse, error) {
	out := new(GateLoadMessageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/LoadMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Notice(ctx context.Context, in *GateNoticeRequest, opts ...grpc.CallOption) (*GateNoticeResponse, error) {
	out := new(GateNoticeResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Notice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gate service

type GateServer interface {
	Register(context.Context, *GateRegisterRequest) (*GateRegisterResponse, error)
	UpdateUserInfo(context.Context, *GateUpdateUserInfoRequest) (*GateUpdateUserInfoResponse, error)
	UpdateUserPassword(context.Context, *GateUpdateUserPasswordRequest) (*GateUpdateUserPasswordResponse, error)
	GetUserInfo(context.Context, *GateGetUserInfoRequest) (*GateGetUserInfoResponse, error)
	Login(context.Context, *GateUserLoginRequest) (*GateUserLoginResponse, error)
	Logout(context.Context, *GateUserLogoutRequest) (*GateUserLogoutResponse, error)
	MessageStream(Gate_MessageStreamServer) error
	// AddFriend 添加好友或确认接受添加.
	AddFriend(context.Context, *GateAddFriendRequest) (*GateAddFriendResponse, error)
	// FindUser 添加好友前先查找出来对应的ID.
	FindUser(context.Context, *GateFindUserRequest) (*GateFindUserResponse, error)
	CreateGroup(context.Context, *GateCreateGroupRequest) (*GateCreateGroupResponse, error)
	Heartbeat(context.Context, *GateHeartbeatRequest) (*GateHeartbeatResponse, error)
	// UploadFile 客户端上传文件接口，一次一个图片.
	UploadFile(context.Context, *GateUploadFileRequest) (*GateUploadFileResponse, error)
	// CheckFile 客户端检测文件是否存在，文件的临时ID和md5, 服务器返回不存在的文件ID.
	CheckFile(context.Context, *GateCheckFileRequest) (*GateCheckFileResponse, error)
	// DownloadFile 客户端下载文件，传入ID，返回具体文件内容.
	DownloadFile(context.Context, *GateDownloadFileRequest) (*GateDownloadFileResponse, error)
	// ID 参照消息ID，每次可逆序(旧消息)或正序(新消息)接收100条
	// 如果ID为0，就逆序返回旧的100条消息
	LoadMessage(context.Context, *GateLoadMessageRequest) (*GateLoadMessageResponse, error)
	// Notice 服务端向客户端推送接口.
	Notice(context.Context, *GateNoticeRequest) (*GateNoticeResponse, error)
}

func RegisterGateServer(s *grpc.Server, srv GateServer) {
	s.RegisterService(&_Gate_serviceDesc, srv)
}

func _Gate_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Register(ctx, req.(*GateRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUpdateUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).UpdateUserInfo(ctx, req.(*GateUpdateUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/UpdateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).UpdateUserPassword(ctx, req.(*GateUpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateGetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).GetUserInfo(ctx, req.(*GateGetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Login(ctx, req.(*GateUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUserLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Logout(ctx, req.(*GateUserLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_MessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GateServer).MessageStream(&gateMessageStreamServer{stream})
}

type Gate_MessageStreamServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type gateMessageStreamServer struct {
	grpc.ServerStream
}

func (x *gateMessageStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gateMessageStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gate_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateAddFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).AddFriend(ctx, req.(*GateAddFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_FindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateFindUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).FindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/FindUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).FindUser(ctx, req.(*GateFindUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateCreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).CreateGroup(ctx, req.(*GateCreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Heartbeat(ctx, req.(*GateHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).UploadFile(ctx, req.(*GateUploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_CheckFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateCheckFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).CheckFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/CheckFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).CheckFile(ctx, req.(*GateCheckFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateDownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).DownloadFile(ctx, req.(*GateDownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_LoadMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateLoadMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).LoadMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/LoadMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).LoadMessage(ctx, req.(*GateLoadMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Notice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Notice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Notice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Notice(ctx, req.(*GateNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "candy.meta.Gate",
	HandlerType: (*GateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Gate_Register_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _Gate_UpdateUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _Gate_UpdateUserPassword_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Gate_GetUserInfo_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Gate_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Gate_Logout_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _Gate_AddFriend_Handler,
		},
		{
			MethodName: "FindUser",
			Handler:    _Gate_FindUser_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Gate_CreateGroup_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Gate_Heartbeat_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _Gate_UploadFile_Handler,
		},
		{
			MethodName: "CheckFile",
			Handler:    _Gate_CheckFile_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _Gate_DownloadFile_Handler,
		},
		{
			MethodName: "LoadMessage",
			Handler:    _Gate_LoadMessage_Handler,
		},
		{
			MethodName: "Notice",
			Handler:    _Gate_Notice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MessageStream",
			Handler:       _Gate_MessageStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("gate.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 907 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x57, 0x6d, 0x6f, 0xe2, 0x46,
	0x10, 0x96, 0x79, 0x2b, 0x0c, 0x90, 0x36, 0x9b, 0x36, 0xa1, 0x96, 0x92, 0x12, 0xa7, 0x89, 0x68,
	0x5a, 0xd1, 0x2a, 0x55, 0xaa, 0xaa, 0x52, 0x5f, 0x52, 0x68, 0x20, 0x6a, 0x20, 0x94, 0xbc, 0xa8,
	0x77, 0x5f, 0x4e, 0x1b, 0xbc, 0x01, 0x0b, 0xb0, 0x39, 0xdb, 0x24, 0xca, 0xc7, 0xfb, 0x4f, 0xf7,
	0x1f, 0xee, 0x6f, 0x9d, 0x76, 0xd7, 0x36, 0x66, 0xd7, 0xe6, 0x08, 0x7c, 0x89, 0x64, 0x7b, 0xe6,
	0x79, 0x66, 0xe7, 0x99, 0xcc, 0xb3, 0x00, 0xf4, 0xb1, 0x4b, 0xaa, 0x13, 0xdb, 0x72, 0x2d, 0x04,
	0x3d, 0x6c, 0xea, 0xcf, 0xd5, 0x31, 0x71, 0xb1, 0x5a, 0xe8, 0x59, 0xe3, 0xb1, 0x65, 0xf2, 0x2f,
	0xda, 0x01, 0x6c, 0x35, 0xb0, 0x4b, 0xce, 0x0d, 0x53, 0xbf, 0x75, 0x88, 0xdd, 0x25, 0x6f, 0xa7,
	0xc4, 0x71, 0x51, 0x01, 0x52, 0xf4, 0xb1, 0xa4, 0x94, 0x95, 0x4a, 0x4e, 0xfb, 0x0f, 0xbe, 0x9c,
	0x0f, 0x72, 0x26, 0x96, 0xe9, 0x10, 0x74, 0x0c, 0x99, 0x01, 0xc1, 0xba, 0x17, 0x97, 0x3f, 0x51,
	0xab, 0x33, 0x9e, 0xaa, 0x1f, 0xd5, 0x64, 0x11, 0xa8, 0x08, 0xe9, 0xa9, 0x43, 0x6c, 0xa7, 0x94,
	0x28, 0x27, 0x2b, 0x39, 0xad, 0xce, 0x21, 0xcf, 0x74, 0xfd, 0xdc, 0x36, 0x88, 0xa9, 0xfb, 0xc4,
	0x1b, 0x90, 0xa1, 0x14, 0x17, 0x75, 0x06, 0x99, 0x44, 0x9f, 0xc3, 0x67, 0x35, 0xcb, 0x7c, 0x30,
	0xec, 0x71, 0x29, 0x51, 0x56, 0x2a, 0x59, 0x94, 0x87, 0x64, 0xcb, 0xe9, 0x97, 0x92, 0xac, 0xb0,
	0x1b, 0xf8, 0x4a, 0x40, 0x59, 0xa1, 0x32, 0x91, 0x42, 0xfb, 0x1e, 0xb6, 0x29, 0x6a, 0xcd, 0x26,
	0xd8, 0x25, 0x0d, 0xdb, 0x9a, 0x4e, 0xfc, 0xea, 0x36, 0x21, 0xc7, 0x9e, 0xdb, 0x78, 0x4c, 0x82,
	0xde, 0xec, 0x48, 0xc1, 0x2b, 0x14, 0x01, 0x90, 0xb8, 0xa8, 0x33, 0xfe, 0xa4, 0x76, 0xca, 0x35,
	0xe9, 0x92, 0xbe, 0xe1, 0xb8, 0x31, 0x9a, 0xa0, 0x2f, 0x20, 0xdb, 0xc1, 0x8e, 0xf3, 0x64, 0xd9,
	0x3a, 0x4b, 0xcb, 0x69, 0x6d, 0xde, 0xd2, 0x59, 0xda, 0x9a, 0x65, 0xfc, 0x0b, 0x5f, 0x53, 0xbc,
	0xdb, 0x89, 0x4e, 0xff, 0x52, 0x51, 0xcc, 0x07, 0x2b, 0xb6, 0x98, 0xb6, 0xd1, 0x1b, 0xb2, 0xb6,
	0xb0, 0x62, 0xa8, 0x8e, 0x67, 0x8f, 0xd8, 0xc5, 0x36, 0x53, 0xaa, 0xa0, 0xdd, 0x80, 0x1a, 0x05,
	0xb6, 0x66, 0x89, 0x7f, 0xc2, 0xee, 0x3c, 0xaa, 0xdf, 0x92, 0x65, 0x7b, 0xf6, 0x3f, 0xec, 0xc5,
	0x01, 0xac, 0x59, 0xda, 0x11, 0x1f, 0xa2, 0x06, 0x71, 0x17, 0xb6, 0x4e, 0x7b, 0xa7, 0xf0, 0x01,
	0x9a, 0x0b, 0x5c, 0x8f, 0x3b, 0x60, 0x48, 0x4a, 0xe2, 0xa4, 0x04, 0x71, 0xd2, 0x4c, 0x9c, 0x6d,
	0x3e, 0x39, 0x4d, 0x82, 0x6d, 0xf7, 0x9e, 0x60, 0xd7, 0xab, 0x54, 0xdb, 0xe1, 0xff, 0x5e, 0xa1,
	0xf7, 0x9c, 0x52, 0xfb, 0x85, 0x27, 0x50, 0x92, 0x4b, 0xab, 0x6f, 0x98, 0xcb, 0xb6, 0xfb, 0x8a,
	0x03, 0x86, 0xf2, 0xd6, 0xec, 0xf2, 0xe1, 0x1c, 0xa0, 0x35, 0x75, 0xa3, 0x9b, 0x5c, 0xe7, 0x62,
	0x84, 0xc3, 0x5e, 0x4e, 0x1c, 0x90, 0x4d, 0x46, 0x16, 0xd6, 0xcf, 0x8d, 0x11, 0x09, 0x91, 0xd1,
	0x47, 0x06, 0x51, 0x08, 0xc8, 0x42, 0x61, 0x2b, 0x91, 0xb1, 0x16, 0xd7, 0x06, 0xa4, 0x37, 0x0c,
	0x73, 0x15, 0x21, 0x4d, 0x95, 0x74, 0x4a, 0x0a, 0xdb, 0xa3, 0x5d, 0x5e, 0x53, 0x28, 0x6c, 0xc6,
	0xd5, 0x7c, 0xc1, 0x6e, 0xe6, 0x98, 0x7c, 0x37, 0x57, 0xf8, 0x44, 0xd6, 0xad, 0x27, 0x53, 0x3c,
	0xa9, 0xc0, 0xfe, 0x5e, 0x81, 0x92, 0x1c, 0xba, 0x82, 0xa6, 0x7f, 0x40, 0x9a, 0xe6, 0xf2, 0x0a,
	0xf2, 0x27, 0x3f, 0x86, 0x43, 0xe3, 0x08, 0xaa, 0x2c, 0xe3, 0x1f, 0xd3, 0xb5, 0x9f, 0xd5, 0x1f,
	0x00, 0x66, 0x4f, 0xd4, 0x23, 0x86, 0xe4, 0xd9, 0x9b, 0xc2, 0x22, 0xa4, 0x1f, 0xf1, 0x68, 0xca,
	0x17, 0x53, 0xe1, 0xb7, 0xc4, 0xaf, 0x8a, 0xd6, 0x84, 0x4d, 0x0a, 0xda, 0xb6, 0x5c, 0xa3, 0x47,
	0x42, 0xbb, 0xbd, 0x36, 0xc0, 0xa6, 0x49, 0x46, 0x81, 0xf9, 0x94, 0xb9, 0xd7, 0x24, 0x58, 0xf9,
	0x5b, 0xe1, 0x9a, 0x5a, 0xc4, 0x71, 0x70, 0x9f, 0x68, 0x7f, 0x01, 0x0a, 0x23, 0xad, 0xa0, 0xf3,
	0x29, 0x9f, 0x96, 0x4b, 0x0b, 0xeb, 0x1e, 0xa8, 0x5f, 0x10, 0x9f, 0xf3, 0xc0, 0x06, 0xbb, 0xe4,
	0x91, 0xd8, 0x0e, 0xf1, 0x3c, 0x6a, 0xc0, 0x35, 0x9a, 0x4b, 0x5b, 0xa1, 0xef, 0xfb, 0x90, 0x6a,
	0x39, 0x7d, 0xbf, 0xed, 0x51, 0x47, 0x3c, 0xf9, 0x00, 0x90, 0xa2, 0x54, 0xa8, 0x05, 0x59, 0xdf,
	0x5b, 0xd0, 0x37, 0xa2, 0x40, 0x82, 0x59, 0xa9, 0xe5, 0xf8, 0x00, 0xaf, 0xcc, 0x37, 0xb0, 0x31,
	0xef, 0x06, 0xe8, 0x50, 0xcc, 0x89, 0xb4, 0x1e, 0xf5, 0xe8, 0x53, 0x61, 0x1e, 0xc1, 0x10, 0x90,
	0xbc, 0xd7, 0xd1, 0x77, 0xf1, 0xd9, 0x82, 0x79, 0xa8, 0xc7, 0xcb, 0x84, 0x7a, 0x64, 0x77, 0x90,
	0x0f, 0x6d, 0x70, 0xa4, 0x89, 0xa9, 0xb2, 0x0f, 0xa8, 0x07, 0x0b, 0x63, 0x3c, 0xdc, 0x4b, 0x48,
	0xb3, 0x4d, 0x89, 0xa4, 0x86, 0x8a, 0xcb, 0x57, 0xdd, 0x5f, 0x10, 0xe1, 0xa1, 0x5d, 0x41, 0x86,
	0xef, 0x3f, 0x14, 0x17, 0x3c, 0x5b, 0xa1, 0xaa, 0xb6, 0x28, 0xc4, 0x03, 0xfc, 0x1d, 0x8a, 0xde,
	0x9c, 0x5c, 0xbb, 0x36, 0xc1, 0x63, 0x14, 0x35, 0x42, 0x6a, 0xd4, 0xcb, 0x8a, 0xf2, 0x93, 0x82,
	0x3a, 0x90, 0x0b, 0xee, 0x6e, 0xf2, 0x09, 0xc5, 0xcb, 0xa1, 0x7c, 0x42, 0xf9, 0xe2, 0xd7, 0x82,
	0xac, 0x7f, 0x4d, 0x95, 0x87, 0x54, 0xb8, 0xe5, 0xca, 0x43, 0x2a, 0xdd, 0x70, 0xef, 0x20, 0x1f,
	0xba, 0xd9, 0xc9, 0xb2, 0xca, 0x77, 0x44, 0x59, 0xd6, 0xa8, 0xab, 0x61, 0x07, 0x72, 0x81, 0xab,
	0xca, 0x07, 0x17, 0x8d, 0x58, 0x3e, 0xb8, 0x64, 0xc9, 0xe8, 0x1a, 0x60, 0xe6, 0x38, 0x11, 0xf2,
	0x8a, 0xa6, 0x15, 0x21, 0xaf, 0x6c, 0x58, 0x1d, 0xba, 0x13, 0x3d, 0x67, 0x91, 0xcb, 0x14, 0xbd,
	0x49, 0x2e, 0x53, 0xb6, 0xa5, 0x57, 0x50, 0x08, 0xef, 0x72, 0x74, 0xb0, 0x78, 0xd3, 0x73, 0xdc,
	0x6f, 0x97, 0xb1, 0x03, 0xaa, 0x55, 0x68, 0x1d, 0xca, 0x5a, 0xc9, 0x2b, 0x56, 0xd6, 0x2a, 0x6a,
	0x9f, 0x36, 0x20, 0xc3, 0xf7, 0x3b, 0xda, 0x15, 0xc3, 0xe7, 0x1c, 0x44, 0xdd, 0x8b, 0xfb, 0xcc,
	0x81, 0xfe, 0xce, 0xbc, 0x4e, 0xd1, 0x4f, 0xf7, 0x19, 0xf6, 0xd3, 0xeb, 0xe7, 0x8f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xe5, 0x79, 0xcf, 0xad, 0xa2, 0x0d, 0x00, 0x00,
}
