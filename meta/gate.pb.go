// Code generated by protoc-gen-go.
// source: gate.proto
// DO NOT EDIT!

package meta

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UserRegisterRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User,json=user" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,json=password" json:"Password,omitempty"`
}

func (m *UserRegisterRequest) Reset()                    { *m = UserRegisterRequest{} }
func (m *UserRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRegisterRequest) ProtoMessage()               {}
func (*UserRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type UserRegisterResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID,json=iD" json:"ID,omitempty"`
}

func (m *UserRegisterResponse) Reset()                    { *m = UserRegisterResponse{} }
func (m *UserRegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*UserRegisterResponse) ProtoMessage()               {}
func (*UserRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *UserRegisterResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type UpdateUserInfoRequest struct {
	Nickname string `protobuf:"bytes,1,opt,name=Nickname,json=nickname" json:"Nickname,omitempty"`
	Avatar   []byte `protobuf:"bytes,2,opt,name=Avatar,json=avatar,proto3" json:"Avatar,omitempty"`
}

func (m *UpdateUserInfoRequest) Reset()                    { *m = UpdateUserInfoRequest{} }
func (m *UpdateUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserInfoRequest) ProtoMessage()               {}
func (*UpdateUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type UpdateUserInfoResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *UpdateUserInfoResponse) Reset()                    { *m = UpdateUserInfoResponse{} }
func (m *UpdateUserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserInfoResponse) ProtoMessage()               {}
func (*UpdateUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *UpdateUserInfoResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type HeartbeatRequest struct {
}

func (m *HeartbeatRequest) Reset()                    { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()               {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type HeartbeatResponse struct {
}

func (m *HeartbeatResponse) Reset()                    { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()               {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type UserLoginRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User,json=user" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,json=password" json:"Password,omitempty"`
}

func (m *UserLoginRequest) Reset()                    { *m = UserLoginRequest{} }
func (m *UserLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*UserLoginRequest) ProtoMessage()               {}
func (*UserLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type UserLoginResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID,json=iD" json:"ID,omitempty"`
}

func (m *UserLoginResponse) Reset()                    { *m = UserLoginResponse{} }
func (m *UserLoginResponse) String() string            { return proto.CompactTextString(m) }
func (*UserLoginResponse) ProtoMessage()               {}
func (*UserLoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *UserLoginResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type UserLogoutRequest struct {
}

func (m *UserLogoutRequest) Reset()                    { *m = UserLogoutRequest{} }
func (m *UserLogoutRequest) String() string            { return proto.CompactTextString(m) }
func (*UserLogoutRequest) ProtoMessage()               {}
func (*UserLogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

type UserLogoutResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *UserLogoutResponse) Reset()                    { *m = UserLogoutResponse{} }
func (m *UserLogoutResponse) String() string            { return proto.CompactTextString(m) }
func (*UserLogoutResponse) ProtoMessage()               {}
func (*UserLogoutResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *UserLogoutResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type SendMessageRequest struct {
	Msg *MessageBody `protobuf:"bytes,1,opt,name=Msg,json=msg" json:"Msg,omitempty"`
}

func (m *SendMessageRequest) Reset()                    { *m = SendMessageRequest{} }
func (m *SendMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*SendMessageRequest) ProtoMessage()               {}
func (*SendMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *SendMessageRequest) GetMsg() *MessageBody {
	if m != nil {
		return m.Msg
	}
	return nil
}

type SendMessageResponse struct {
	Header    *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MessageID int64           `protobuf:"varint,2,opt,name=MessageID,json=messageID" json:"MessageID,omitempty"`
}

func (m *SendMessageResponse) Reset()                    { *m = SendMessageResponse{} }
func (m *SendMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*SendMessageResponse) ProtoMessage()               {}
func (*SendMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *SendMessageResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type RecvMessageRequest struct {
	LastMessageID int64 `protobuf:"varint,1,opt,name=LastMessageID,json=lastMessageID" json:"LastMessageID,omitempty"`
}

func (m *RecvMessageRequest) Reset()                    { *m = RecvMessageRequest{} }
func (m *RecvMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*RecvMessageRequest) ProtoMessage()               {}
func (*RecvMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

type RecvMessageResponse struct {
	MsgList []*MessageBody `protobuf:"bytes,1,rep,name=MsgList,json=msgList" json:"MsgList,omitempty"`
}

func (m *RecvMessageResponse) Reset()                    { *m = RecvMessageResponse{} }
func (m *RecvMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*RecvMessageResponse) ProtoMessage()               {}
func (*RecvMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *RecvMessageResponse) GetMsgList() []*MessageBody {
	if m != nil {
		return m.MsgList
	}
	return nil
}

type UserMessageList struct {
	MsgList []*MessageBody `protobuf:"bytes,1,rep,name=MsgList,json=msgList" json:"MsgList,omitempty"`
}

func (m *UserMessageList) Reset()                    { *m = UserMessageList{} }
func (m *UserMessageList) String() string            { return proto.CompactTextString(m) }
func (*UserMessageList) ProtoMessage()               {}
func (*UserMessageList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *UserMessageList) GetMsgList() []*MessageBody {
	if m != nil {
		return m.MsgList
	}
	return nil
}

type UploadImageRequest struct {
	Image []byte `protobuf:"bytes,1,opt,name=Image,json=image,proto3" json:"Image,omitempty"`
}

func (m *UploadImageRequest) Reset()                    { *m = UploadImageRequest{} }
func (m *UploadImageRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadImageRequest) ProtoMessage()               {}
func (*UploadImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

type UploadImageResponse struct {
	Header  *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ImageID int64           `protobuf:"varint,2,opt,name=ImageID,json=imageID" json:"ImageID,omitempty"`
}

func (m *UploadImageResponse) Reset()                    { *m = UploadImageResponse{} }
func (m *UploadImageResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadImageResponse) ProtoMessage()               {}
func (*UploadImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *UploadImageResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type DownloadImageRequest struct {
	ImageID []int64 `protobuf:"varint,1,rep,packed,name=ImageID,json=imageID" json:"ImageID,omitempty"`
}

func (m *DownloadImageRequest) Reset()                    { *m = DownloadImageRequest{} }
func (m *DownloadImageRequest) String() string            { return proto.CompactTextString(m) }
func (*DownloadImageRequest) ProtoMessage()               {}
func (*DownloadImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

type DownloadImageResponse struct {
	Image [][]byte `protobuf:"bytes,1,rep,name=Image,json=image,proto3" json:"Image,omitempty"`
}

func (m *DownloadImageResponse) Reset()                    { *m = DownloadImageResponse{} }
func (m *DownloadImageResponse) String() string            { return proto.CompactTextString(m) }
func (*DownloadImageResponse) ProtoMessage()               {}
func (*DownloadImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

type NoticeRequest struct {
	ChannelID int64        `protobuf:"varint,1,opt,name=ChannelID,json=channelID" json:"ChannelID,omitempty"`
	Msg       *MessageBody `protobuf:"bytes,2,opt,name=Msg,json=msg" json:"Msg,omitempty"`
}

func (m *NoticeRequest) Reset()                    { *m = NoticeRequest{} }
func (m *NoticeRequest) String() string            { return proto.CompactTextString(m) }
func (*NoticeRequest) ProtoMessage()               {}
func (*NoticeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *NoticeRequest) GetMsg() *MessageBody {
	if m != nil {
		return m.Msg
	}
	return nil
}

type NoticeResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *NoticeResponse) Reset()                    { *m = NoticeResponse{} }
func (m *NoticeResponse) String() string            { return proto.CompactTextString(m) }
func (*NoticeResponse) ProtoMessage()               {}
func (*NoticeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *NoticeResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*UserRegisterRequest)(nil), "candy.meta.UserRegisterRequest")
	proto.RegisterType((*UserRegisterResponse)(nil), "candy.meta.UserRegisterResponse")
	proto.RegisterType((*UpdateUserInfoRequest)(nil), "candy.meta.UpdateUserInfoRequest")
	proto.RegisterType((*UpdateUserInfoResponse)(nil), "candy.meta.UpdateUserInfoResponse")
	proto.RegisterType((*HeartbeatRequest)(nil), "candy.meta.HeartbeatRequest")
	proto.RegisterType((*HeartbeatResponse)(nil), "candy.meta.HeartbeatResponse")
	proto.RegisterType((*UserLoginRequest)(nil), "candy.meta.UserLoginRequest")
	proto.RegisterType((*UserLoginResponse)(nil), "candy.meta.UserLoginResponse")
	proto.RegisterType((*UserLogoutRequest)(nil), "candy.meta.UserLogoutRequest")
	proto.RegisterType((*UserLogoutResponse)(nil), "candy.meta.UserLogoutResponse")
	proto.RegisterType((*SendMessageRequest)(nil), "candy.meta.SendMessageRequest")
	proto.RegisterType((*SendMessageResponse)(nil), "candy.meta.SendMessageResponse")
	proto.RegisterType((*RecvMessageRequest)(nil), "candy.meta.RecvMessageRequest")
	proto.RegisterType((*RecvMessageResponse)(nil), "candy.meta.RecvMessageResponse")
	proto.RegisterType((*UserMessageList)(nil), "candy.meta.UserMessageList")
	proto.RegisterType((*UploadImageRequest)(nil), "candy.meta.UploadImageRequest")
	proto.RegisterType((*UploadImageResponse)(nil), "candy.meta.UploadImageResponse")
	proto.RegisterType((*DownloadImageRequest)(nil), "candy.meta.DownloadImageRequest")
	proto.RegisterType((*DownloadImageResponse)(nil), "candy.meta.DownloadImageResponse")
	proto.RegisterType((*NoticeRequest)(nil), "candy.meta.NoticeRequest")
	proto.RegisterType((*NoticeResponse)(nil), "candy.meta.NoticeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Gate service

type GateClient interface {
	Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error)
	Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	Logout(ctx context.Context, in *UserLogoutRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	RecvMessage(ctx context.Context, in *RecvMessageRequest, opts ...grpc.CallOption) (*RecvMessageResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error)
	// server interface.
	Notice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*NoticeResponse, error)
}

type gateClient struct {
	cc *grpc.ClientConn
}

func NewGateClient(cc *grpc.ClientConn) GateClient {
	return &gateClient{cc}
}

func (c *gateClient) Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	out := new(UserRegisterResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error) {
	out := new(UpdateUserInfoResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/UpdateUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Logout(ctx context.Context, in *UserLogoutRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) RecvMessage(ctx context.Context, in *RecvMessageRequest, opts ...grpc.CallOption) (*RecvMessageResponse, error) {
	out := new(RecvMessageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/RecvMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/UploadImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error) {
	out := new(DownloadImageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/DownloadImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Notice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*NoticeResponse, error) {
	out := new(NoticeResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Notice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gate service

type GateServer interface {
	Register(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoRequest) (*UpdateUserInfoResponse, error)
	Login(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	Logout(context.Context, *UserLogoutRequest) (*UserLoginResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	RecvMessage(context.Context, *RecvMessageRequest) (*RecvMessageResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	DownloadImage(context.Context, *DownloadImageRequest) (*DownloadImageResponse, error)
	// server interface.
	Notice(context.Context, *NoticeRequest) (*NoticeResponse, error)
}

func RegisterGateServer(s *grpc.Server, srv GateServer) {
	s.RegisterService(&_Gate_serviceDesc, srv)
}

func _Gate_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Register(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Login(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Logout(ctx, req.(*UserLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_RecvMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).RecvMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/RecvMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).RecvMessage(ctx, req.(*RecvMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_DownloadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).DownloadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/DownloadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).DownloadImage(ctx, req.(*DownloadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Notice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Notice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Notice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Notice(ctx, req.(*NoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "candy.meta.Gate",
	HandlerType: (*GateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Gate_Register_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _Gate_UpdateUserInfo_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Gate_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Gate_Logout_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Gate_SendMessage_Handler,
		},
		{
			MethodName: "RecvMessage",
			Handler:    _Gate_RecvMessage_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Gate_Heartbeat_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _Gate_UploadImage_Handler,
		},
		{
			MethodName: "DownloadImage",
			Handler:    _Gate_DownloadImage_Handler,
		},
		{
			MethodName: "Notice",
			Handler:    _Gate_Notice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("gate.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0xdf, 0x53, 0xd3, 0x40,
	0x10, 0x9e, 0xfe, 0x20, 0x6d, 0x16, 0x8a, 0x70, 0x01, 0xac, 0x19, 0x14, 0xb8, 0xf1, 0x41, 0x9d,
	0xb1, 0xa3, 0xf8, 0xe6, 0x0b, 0x23, 0x46, 0x2d, 0x63, 0xcb, 0x38, 0x51, 0x06, 0x87, 0xb7, 0x23,
	0x39, 0x43, 0x46, 0x92, 0xab, 0xb9, 0x03, 0x86, 0x3f, 0xc2, 0xff, 0xd9, 0x49, 0x72, 0x49, 0xef,
	0xda, 0xb4, 0x3a, 0xad, 0x4f, 0xcc, 0xee, 0x7d, 0xfb, 0xdd, 0xb7, 0xcb, 0xed, 0x97, 0x02, 0x04,
	0x44, 0xd0, 0xde, 0x28, 0x61, 0x82, 0x21, 0xf0, 0x48, 0xec, 0xdf, 0xf7, 0x22, 0x2a, 0x88, 0xbd,
	0xe6, 0xb1, 0x28, 0x62, 0x71, 0x7e, 0x82, 0x3f, 0x80, 0x75, 0xc6, 0x69, 0xe2, 0xd2, 0x20, 0xe4,
	0x22, 0xfd, 0xfb, 0xeb, 0x86, 0x72, 0x81, 0x10, 0x34, 0xd3, 0x74, 0xb7, 0xb6, 0x5f, 0x7b, 0x66,
	0xba, 0xcd, 0x1b, 0x4e, 0x13, 0x64, 0x43, 0xfb, 0x0b, 0xe1, 0xfc, 0x8e, 0x25, 0x7e, 0xb7, 0x9e,
	0xe5, 0xdb, 0x23, 0x19, 0xe3, 0x0b, 0xd8, 0xd2, 0x69, 0xf8, 0x88, 0xc5, 0x9c, 0xa2, 0x43, 0x30,
	0xae, 0x28, 0xf1, 0x25, 0xd3, 0xea, 0xa1, 0xdd, 0x1b, 0x2b, 0xe9, 0x15, 0xa8, 0x7e, 0x86, 0x70,
	0x25, 0x12, 0xad, 0x43, 0xfd, 0xc4, 0xc9, 0x6e, 0x68, 0xb8, 0xf5, 0xd0, 0xc1, 0x9f, 0x61, 0xfb,
	0x6c, 0xe4, 0x13, 0x41, 0xd3, 0x1b, 0x4e, 0xe2, 0x1f, 0xac, 0x10, 0x69, 0x43, 0xfb, 0x34, 0xf4,
	0x7e, 0xc6, 0x24, 0xa2, 0x52, 0x68, 0x3b, 0x96, 0x31, 0xda, 0x01, 0xe3, 0xdd, 0x2d, 0x11, 0x24,
	0xc9, 0x88, 0xd6, 0x5c, 0x83, 0x64, 0x11, 0x1e, 0xc0, 0xce, 0x24, 0xd9, 0xe2, 0x52, 0x31, 0x82,
	0x8d, 0x3e, 0x25, 0x89, 0xb8, 0xa4, 0x44, 0x48, 0x55, 0xd8, 0x82, 0x4d, 0x25, 0x97, 0x97, 0xe1,
	0x63, 0xd8, 0x48, 0x2f, 0x1c, 0xb0, 0x20, 0x8c, 0x17, 0x9d, 0xf1, 0x39, 0x6c, 0x2a, 0x1c, 0xff,
	0x71, 0xc0, 0x56, 0x49, 0xcc, 0x6e, 0xca, 0x36, 0xfa, 0x80, 0xd4, 0xe4, 0x12, 0x43, 0x3a, 0x02,
	0xf4, 0x95, 0xc6, 0xfe, 0x90, 0x72, 0x4e, 0x02, 0x5a, 0x74, 0xff, 0x1c, 0x1a, 0x43, 0x1e, 0x48,
	0x9a, 0x87, 0x2a, 0x8d, 0x04, 0x1e, 0x33, 0xff, 0xde, 0x6d, 0x44, 0x3c, 0xc0, 0x01, 0x58, 0x1a,
	0xc1, 0x12, 0xad, 0xef, 0x82, 0x29, 0x69, 0xca, 0x09, 0x98, 0x51, 0x91, 0xc0, 0x6f, 0x01, 0xb9,
	0xd4, 0xbb, 0x9d, 0x50, 0xfa, 0x14, 0x3a, 0x03, 0xc2, 0xc5, 0xb8, 0xae, 0x96, 0xd5, 0x75, 0xae,
	0xd5, 0x24, 0xee, 0x83, 0xa5, 0xd5, 0x4a, 0x91, 0xaf, 0xa1, 0x35, 0xe4, 0xc1, 0x20, 0xe4, 0xa2,
	0x5b, 0xdb, 0x6f, 0xcc, 0x6b, 0xb5, 0x15, 0xe5, 0x38, 0xec, 0xc0, 0x83, 0x74, 0xf2, 0xf2, 0x2c,
	0x4d, 0x2d, 0xc2, 0xf2, 0x02, 0xd0, 0xd9, 0xe8, 0x9a, 0x11, 0xff, 0x24, 0x52, 0x7a, 0xd9, 0x82,
	0x95, 0x2c, 0xce, 0x7a, 0x58, 0x73, 0x57, 0xc2, 0x34, 0xc0, 0x1e, 0x58, 0x1a, 0x76, 0x89, 0x01,
	0x77, 0xa1, 0x95, 0x91, 0x94, 0xe3, 0x6d, 0x85, 0x79, 0x88, 0x5f, 0xc1, 0x96, 0xc3, 0xee, 0xe2,
	0x29, 0x49, 0x4a, 0x45, 0xda, 0x9b, 0x52, 0xf1, 0x12, 0xb6, 0x27, 0x2a, 0xa4, 0x30, 0xa5, 0x8b,
	0xc6, 0xb8, 0x8b, 0xef, 0xd0, 0x39, 0x65, 0x22, 0xf4, 0x4a, 0xe6, 0x5d, 0x30, 0xdf, 0x5f, 0x91,
	0x38, 0xa6, 0xd7, 0xe5, 0x3f, 0xcd, 0xf4, 0x8a, 0x44, 0xf1, 0x00, 0xeb, 0xff, 0xf0, 0x00, 0x1d,
	0x58, 0x2f, 0x98, 0x17, 0x1f, 0xcd, 0xe1, 0x6f, 0x03, 0x9a, 0x9f, 0x88, 0xa0, 0x68, 0x08, 0xed,
	0xc2, 0x28, 0xd1, 0x9e, 0x5a, 0x58, 0xe1, 0xc4, 0xf6, 0xfe, 0x6c, 0x80, 0xd4, 0x72, 0x0e, 0xeb,
	0xba, 0xa5, 0xa1, 0x03, 0xad, 0xa6, 0xca, 0x3b, 0x6d, 0x3c, 0x0f, 0x22, 0x89, 0x1d, 0x58, 0xc9,
	0xcc, 0x06, 0xed, 0x4e, 0x6a, 0x50, 0x7d, 0xcc, 0x7e, 0x3c, 0xe3, 0x54, 0xb2, 0x7c, 0x04, 0x23,
	0x37, 0x11, 0x54, 0x05, 0x1c, 0x3b, 0xce, 0xdf, 0x78, 0x4e, 0x61, 0x55, 0x71, 0x01, 0xf4, 0x44,
	0x45, 0x4f, 0xfb, 0x8b, 0xbd, 0x37, 0xf3, 0x7c, 0xcc, 0xa7, 0x2c, 0xac, 0xce, 0x37, 0xed, 0x02,
	0x3a, 0x5f, 0xd5, 0xa6, 0xf7, 0xc1, 0x2c, 0x7d, 0x5f, 0x9f, 0xd8, 0xe4, 0x27, 0x42, 0xef, 0x74,
	0xea, 0x63, 0x91, 0x2a, 0x53, 0xd6, 0x51, 0x57, 0x36, 0xbd, 0xd3, 0xba, 0xb2, 0xaa, 0x3d, 0xfe,
	0x06, 0x1d, 0x6d, 0x8f, 0x90, 0xf6, 0xa6, 0xaa, 0x96, 0xd2, 0x3e, 0x98, 0x83, 0x90, 0xac, 0x47,
	0x60, 0xe4, 0x4b, 0x81, 0x1e, 0xa9, 0x60, 0x6d, 0x05, 0x6d, 0xbb, 0xea, 0x28, 0x27, 0x38, 0x36,
	0x2e, 0x9a, 0x69, 0xfa, 0xd2, 0xc8, 0x7e, 0x89, 0xbc, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0x81,
	0x64, 0x1b, 0x04, 0xb1, 0x08, 0x00, 0x00,
}
