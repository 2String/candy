// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package meta is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	ResponseHeader
	UserRegisterRequest
	UserRegisterResponse
	UpdateUserInfoRequest
	UpdateUserInfoResponse
	HeartbeatRequest
	HeartbeatResponse
	UserLoginRequest
	UserLoginResponse
	UserLogoutRequest
	UserLogoutResponse
	MessageBody
	SendMessageRequest
	SendMessageResponse
	RecvMessageRequest
	RecvMessageResponse
	UserMessageList
	UploadImageRequest
	UploadImageResponse
	DownloadImageRequest
	DownloadImageResponse
*/
package meta

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResponseHeader struct {
	Code int32  `protobuf:"varint,1,opt,name=Code,json=code" json:"Code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=Msg,json=msg" json:"Msg,omitempty"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UserRegisterRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User,json=user" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,json=password" json:"Password,omitempty"`
}

func (m *UserRegisterRequest) Reset()                    { *m = UserRegisterRequest{} }
func (m *UserRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRegisterRequest) ProtoMessage()               {}
func (*UserRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type UserRegisterResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *UserRegisterResponse) Reset()                    { *m = UserRegisterResponse{} }
func (m *UserRegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*UserRegisterResponse) ProtoMessage()               {}
func (*UserRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserRegisterResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type UpdateUserInfoRequest struct {
	Nickname string `protobuf:"bytes,1,opt,name=Nickname,json=nickname" json:"Nickname,omitempty"`
	Avatar   []byte `protobuf:"bytes,2,opt,name=Avatar,json=avatar,proto3" json:"Avatar,omitempty"`
}

func (m *UpdateUserInfoRequest) Reset()                    { *m = UpdateUserInfoRequest{} }
func (m *UpdateUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserInfoRequest) ProtoMessage()               {}
func (*UpdateUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type UpdateUserInfoResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *UpdateUserInfoResponse) Reset()                    { *m = UpdateUserInfoResponse{} }
func (m *UpdateUserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserInfoResponse) ProtoMessage()               {}
func (*UpdateUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateUserInfoResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type HeartbeatRequest struct {
}

func (m *HeartbeatRequest) Reset()                    { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()               {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type HeartbeatResponse struct {
}

func (m *HeartbeatResponse) Reset()                    { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()               {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type UserLoginRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User,json=user" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,json=password" json:"Password,omitempty"`
}

func (m *UserLoginRequest) Reset()                    { *m = UserLoginRequest{} }
func (m *UserLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*UserLoginRequest) ProtoMessage()               {}
func (*UserLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type UserLoginResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserID int64           `protobuf:"varint,2,opt,name=UserID,json=userID" json:"UserID,omitempty"`
}

func (m *UserLoginResponse) Reset()                    { *m = UserLoginResponse{} }
func (m *UserLoginResponse) String() string            { return proto.CompactTextString(m) }
func (*UserLoginResponse) ProtoMessage()               {}
func (*UserLoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UserLoginResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type UserLogoutRequest struct {
	UserID int64 `protobuf:"varint,1,opt,name=UserID,json=userID" json:"UserID,omitempty"`
}

func (m *UserLogoutRequest) Reset()                    { *m = UserLogoutRequest{} }
func (m *UserLogoutRequest) String() string            { return proto.CompactTextString(m) }
func (*UserLogoutRequest) ProtoMessage()               {}
func (*UserLogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type UserLogoutResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *UserLogoutResponse) Reset()                    { *m = UserLogoutResponse{} }
func (m *UserLogoutResponse) String() string            { return proto.CompactTextString(m) }
func (*UserLogoutResponse) ProtoMessage()               {}
func (*UserLogoutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UserLogoutResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type MessageBody struct {
	From    int64 `protobuf:"varint,1,opt,name=From,json=from" json:"From,omitempty"`
	To      int64 `protobuf:"varint,2,opt,name=To,json=to" json:"To,omitempty"`
	ImageID int64 `protobuf:"varint,3,opt,name=ImageID,json=imageID" json:"ImageID,omitempty"`
}

func (m *MessageBody) Reset()                    { *m = MessageBody{} }
func (m *MessageBody) String() string            { return proto.CompactTextString(m) }
func (*MessageBody) ProtoMessage()               {}
func (*MessageBody) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type SendMessageRequest struct {
	Msg *MessageBody `protobuf:"bytes,1,opt,name=Msg,json=msg" json:"Msg,omitempty"`
}

func (m *SendMessageRequest) Reset()                    { *m = SendMessageRequest{} }
func (m *SendMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*SendMessageRequest) ProtoMessage()               {}
func (*SendMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SendMessageRequest) GetMsg() *MessageBody {
	if m != nil {
		return m.Msg
	}
	return nil
}

type SendMessageResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *SendMessageResponse) Reset()                    { *m = SendMessageResponse{} }
func (m *SendMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*SendMessageResponse) ProtoMessage()               {}
func (*SendMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SendMessageResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type RecvMessageRequest struct {
	LastMessageID int64 `protobuf:"varint,1,opt,name=LastMessageID,json=lastMessageID" json:"LastMessageID,omitempty"`
}

func (m *RecvMessageRequest) Reset()                    { *m = RecvMessageRequest{} }
func (m *RecvMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*RecvMessageRequest) ProtoMessage()               {}
func (*RecvMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type RecvMessageResponse struct {
	MsgList []*MessageBody `protobuf:"bytes,1,rep,name=MsgList,json=msgList" json:"MsgList,omitempty"`
}

func (m *RecvMessageResponse) Reset()                    { *m = RecvMessageResponse{} }
func (m *RecvMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*RecvMessageResponse) ProtoMessage()               {}
func (*RecvMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *RecvMessageResponse) GetMsgList() []*MessageBody {
	if m != nil {
		return m.MsgList
	}
	return nil
}

type UserMessageList struct {
	MsgList []*MessageBody `protobuf:"bytes,1,rep,name=MsgList,json=msgList" json:"MsgList,omitempty"`
}

func (m *UserMessageList) Reset()                    { *m = UserMessageList{} }
func (m *UserMessageList) String() string            { return proto.CompactTextString(m) }
func (*UserMessageList) ProtoMessage()               {}
func (*UserMessageList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UserMessageList) GetMsgList() []*MessageBody {
	if m != nil {
		return m.MsgList
	}
	return nil
}

type UploadImageRequest struct {
	Image []byte `protobuf:"bytes,1,opt,name=Image,json=image,proto3" json:"Image,omitempty"`
}

func (m *UploadImageRequest) Reset()                    { *m = UploadImageRequest{} }
func (m *UploadImageRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadImageRequest) ProtoMessage()               {}
func (*UploadImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type UploadImageResponse struct {
	Header  *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ImageID int64           `protobuf:"varint,2,opt,name=ImageID,json=imageID" json:"ImageID,omitempty"`
}

func (m *UploadImageResponse) Reset()                    { *m = UploadImageResponse{} }
func (m *UploadImageResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadImageResponse) ProtoMessage()               {}
func (*UploadImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UploadImageResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type DownloadImageRequest struct {
	ImageID []int64 `protobuf:"varint,1,rep,packed,name=ImageID,json=imageID" json:"ImageID,omitempty"`
}

func (m *DownloadImageRequest) Reset()                    { *m = DownloadImageRequest{} }
func (m *DownloadImageRequest) String() string            { return proto.CompactTextString(m) }
func (*DownloadImageRequest) ProtoMessage()               {}
func (*DownloadImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type DownloadImageResponse struct {
	Image [][]byte `protobuf:"bytes,1,rep,name=Image,json=image,proto3" json:"Image,omitempty"`
}

func (m *DownloadImageResponse) Reset()                    { *m = DownloadImageResponse{} }
func (m *DownloadImageResponse) String() string            { return proto.CompactTextString(m) }
func (*DownloadImageResponse) ProtoMessage()               {}
func (*DownloadImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func init() {
	proto.RegisterType((*ResponseHeader)(nil), "candy.meta.ResponseHeader")
	proto.RegisterType((*UserRegisterRequest)(nil), "candy.meta.UserRegisterRequest")
	proto.RegisterType((*UserRegisterResponse)(nil), "candy.meta.UserRegisterResponse")
	proto.RegisterType((*UpdateUserInfoRequest)(nil), "candy.meta.UpdateUserInfoRequest")
	proto.RegisterType((*UpdateUserInfoResponse)(nil), "candy.meta.UpdateUserInfoResponse")
	proto.RegisterType((*HeartbeatRequest)(nil), "candy.meta.HeartbeatRequest")
	proto.RegisterType((*HeartbeatResponse)(nil), "candy.meta.HeartbeatResponse")
	proto.RegisterType((*UserLoginRequest)(nil), "candy.meta.UserLoginRequest")
	proto.RegisterType((*UserLoginResponse)(nil), "candy.meta.UserLoginResponse")
	proto.RegisterType((*UserLogoutRequest)(nil), "candy.meta.UserLogoutRequest")
	proto.RegisterType((*UserLogoutResponse)(nil), "candy.meta.UserLogoutResponse")
	proto.RegisterType((*MessageBody)(nil), "candy.meta.MessageBody")
	proto.RegisterType((*SendMessageRequest)(nil), "candy.meta.SendMessageRequest")
	proto.RegisterType((*SendMessageResponse)(nil), "candy.meta.SendMessageResponse")
	proto.RegisterType((*RecvMessageRequest)(nil), "candy.meta.RecvMessageRequest")
	proto.RegisterType((*RecvMessageResponse)(nil), "candy.meta.RecvMessageResponse")
	proto.RegisterType((*UserMessageList)(nil), "candy.meta.UserMessageList")
	proto.RegisterType((*UploadImageRequest)(nil), "candy.meta.UploadImageRequest")
	proto.RegisterType((*UploadImageResponse)(nil), "candy.meta.UploadImageResponse")
	proto.RegisterType((*DownloadImageRequest)(nil), "candy.meta.DownloadImageRequest")
	proto.RegisterType((*DownloadImageResponse)(nil), "candy.meta.DownloadImageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Message service

type MessageClient interface {
	Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error)
	Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	Logout(ctx context.Context, in *UserLogoutRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	RecvMessage(ctx context.Context, in *RecvMessageRequest, opts ...grpc.CallOption) (*RecvMessageResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error)
}

type messageClient struct {
	cc *grpc.ClientConn
}

func NewMessageClient(cc *grpc.ClientConn) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	out := new(UserRegisterResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Message/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error) {
	out := new(UpdateUserInfoResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Message/UpdateUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Message/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Logout(ctx context.Context, in *UserLogoutRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Message/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Message/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) RecvMessage(ctx context.Context, in *RecvMessageRequest, opts ...grpc.CallOption) (*RecvMessageResponse, error) {
	out := new(RecvMessageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Message/RecvMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Message/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Message/UploadImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error) {
	out := new(DownloadImageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Message/DownloadImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Message service

type MessageServer interface {
	Register(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoRequest) (*UpdateUserInfoResponse, error)
	Login(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	Logout(context.Context, *UserLogoutRequest) (*UserLoginResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	RecvMessage(context.Context, *RecvMessageRequest) (*RecvMessageResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	DownloadImage(context.Context, *DownloadImageRequest) (*DownloadImageResponse, error)
}

func RegisterMessageServer(s *grpc.Server, srv MessageServer) {
	s.RegisterService(&_Message_serviceDesc, srv)
}

func _Message_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Message/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Register(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Message/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Message/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Login(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Message/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Logout(ctx, req.(*UserLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Message/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_RecvMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).RecvMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Message/RecvMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).RecvMessage(ctx, req.(*RecvMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Message/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Message/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_DownloadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).DownloadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Message/DownloadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).DownloadImage(ctx, req.(*DownloadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Message_serviceDesc = grpc.ServiceDesc{
	ServiceName: "candy.meta.Message",
	HandlerType: (*MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Message_Register_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _Message_UpdateUserInfo_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Message_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Message_Logout_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Message_SendMessage_Handler,
		},
		{
			MethodName: "RecvMessage",
			Handler:    _Message_RecvMessage_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Message_Heartbeat_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _Message_UploadImage_Handler,
		},
		{
			MethodName: "DownloadImage",
			Handler:    _Message_DownloadImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 662 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x56, 0x51, 0x6f, 0x12, 0x41,
	0x10, 0x0e, 0x1c, 0x1c, 0x74, 0x5a, 0x90, 0x2e, 0xb4, 0x92, 0x8b, 0x5a, 0xba, 0xf1, 0xa1, 0x6a,
	0x24, 0x8a, 0x89, 0x0f, 0xbe, 0x18, 0x11, 0x1b, 0x50, 0x68, 0xcc, 0x59, 0x62, 0xe2, 0x8b, 0xd9,
	0x72, 0xdb, 0x93, 0xd8, 0xbb, 0xc5, 0xdb, 0xa3, 0x4d, 0x7f, 0xa5, 0x7f, 0xc9, 0xec, 0xde, 0x02,
	0xbb, 0x70, 0x60, 0x02, 0x4f, 0x64, 0xe6, 0x66, 0xbe, 0xf9, 0xbe, 0xd9, 0x99, 0x09, 0x50, 0x0a,
	0x28, 0xe7, 0xc4, 0xa7, 0xcd, 0x49, 0xc4, 0x62, 0x86, 0x60, 0x44, 0x42, 0xef, 0xbe, 0x19, 0xd0,
	0x98, 0xe0, 0xb7, 0x50, 0x76, 0x29, 0x9f, 0xb0, 0x90, 0xd3, 0x2e, 0x25, 0x1e, 0x8d, 0x10, 0x82,
	0xdc, 0x47, 0xe6, 0xd1, 0x7a, 0xa6, 0x91, 0x39, 0xcb, 0xbb, 0xb9, 0x11, 0xf3, 0x28, 0xaa, 0x80,
	0x35, 0xe0, 0x7e, 0x3d, 0xdb, 0xc8, 0x9c, 0xed, 0xb9, 0x56, 0xc0, 0x7d, 0xfc, 0x09, 0xaa, 0x43,
	0x4e, 0x23, 0x97, 0xfa, 0x63, 0x1e, 0x8b, 0xdf, 0x3f, 0x53, 0xca, 0x63, 0x91, 0x2c, 0xdc, 0x32,
	0x79, 0xcf, 0xcd, 0x4d, 0x39, 0x8d, 0x90, 0x03, 0xc5, 0xaf, 0x84, 0xf3, 0x3b, 0x16, 0x79, 0x0a,
	0xa1, 0x38, 0x51, 0x36, 0xfe, 0x0c, 0x35, 0x13, 0x26, 0xa1, 0x82, 0x5a, 0x60, 0xff, 0x92, 0x74,
	0x24, 0xd2, 0x7e, 0xcb, 0x69, 0x2e, 0x38, 0x37, 0x4d, 0xc2, 0xae, 0x8a, 0xc4, 0x5f, 0xe0, 0x68,
	0x38, 0xf1, 0x48, 0x4c, 0x05, 0x62, 0x2f, 0xbc, 0x66, 0x33, 0x52, 0x0e, 0x14, 0x2f, 0xc6, 0xa3,
	0xdf, 0x21, 0x09, 0xa8, 0x22, 0x56, 0x0c, 0x95, 0x8d, 0x8e, 0xc1, 0xfe, 0x70, 0x4b, 0x62, 0x12,
	0x49, 0x6a, 0x07, 0xae, 0x4d, 0xa4, 0x85, 0xfb, 0x70, 0xbc, 0x0c, 0xb6, 0x03, 0x35, 0x04, 0x95,
	0x2e, 0x25, 0x51, 0x7c, 0x45, 0x49, 0xac, 0x58, 0xe1, 0x2a, 0x1c, 0x6a, 0xbe, 0x24, 0x0d, 0xb7,
	0xa1, 0x22, 0x0a, 0xf6, 0x99, 0x3f, 0x0e, 0xb7, 0xed, 0xe9, 0x4f, 0x38, 0xd4, 0x30, 0xb6, 0x67,
	0x2d, 0x7a, 0x23, 0xd5, 0x77, 0x64, 0x09, 0xcb, 0xb5, 0xa7, 0xd2, 0xc2, 0x2f, 0xe6, 0x05, 0xd8,
	0x74, 0x26, 0x47, 0x0b, 0xce, 0x18, 0xc1, 0x5d, 0x40, 0x7a, 0xf0, 0x4e, 0xef, 0xbb, 0x3f, 0x48,
	0xe6, 0xb8, 0xcd, 0xbc, 0x7b, 0xd1, 0x96, 0xf3, 0x88, 0x05, 0xaa, 0x5c, 0xee, 0x3a, 0x62, 0x01,
	0x2a, 0x43, 0xf6, 0x92, 0x29, 0xb6, 0xd9, 0x98, 0xa1, 0x3a, 0x14, 0x7a, 0x01, 0xf1, 0x69, 0xaf,
	0x53, 0xb7, 0xa4, 0xb3, 0x30, 0x4e, 0x4c, 0xfc, 0x1e, 0xd0, 0x37, 0x1a, 0x7a, 0x0a, 0x70, 0x26,
	0xe2, 0x59, 0x32, 0xe7, 0x09, 0xa7, 0x87, 0x3a, 0x27, 0xad, 0x72, 0xb2, 0x00, 0x3d, 0xa8, 0x1a,
	0x00, 0x3b, 0x08, 0x7b, 0x07, 0xc8, 0xa5, 0xa3, 0xdb, 0x25, 0x2e, 0x4f, 0xa1, 0xd4, 0x27, 0x3c,
	0x56, 0xde, 0x79, 0x5f, 0x4b, 0x37, 0xba, 0x13, 0x77, 0xa1, 0x6a, 0xe4, 0x2a, 0x1a, 0xaf, 0xa1,
	0x30, 0xe0, 0x7e, 0x7f, 0xcc, 0xe3, 0x7a, 0xa6, 0x61, 0x6d, 0x12, 0x53, 0x08, 0x92, 0x38, 0xdc,
	0x81, 0x07, 0xe2, 0xa1, 0xd4, 0x37, 0xe1, 0xda, 0x06, 0xe5, 0x39, 0xa0, 0xe1, 0xe4, 0x86, 0x11,
	0x4f, 0xf6, 0x7d, 0xa6, 0xa5, 0x06, 0x79, 0x69, 0x4b, 0x0d, 0x07, 0x6e, 0x5e, 0xbe, 0x02, 0x1e,
	0x41, 0xd5, 0x88, 0xdd, 0x61, 0x54, 0xb5, 0x87, 0xce, 0x9a, 0x0f, 0xfd, 0x0a, 0x6a, 0x1d, 0x76,
	0x17, 0xae, 0x50, 0xd2, 0x32, 0x84, 0x36, 0x2d, 0xe3, 0x25, 0x1c, 0x2d, 0x65, 0x28, 0x62, 0x9a,
	0x0a, 0x6b, 0xae, 0xa2, 0xf5, 0x37, 0x0f, 0x05, 0xd5, 0x0a, 0x34, 0x80, 0xe2, 0xec, 0x94, 0xa1,
	0x13, 0x9d, 0x76, 0xca, 0xad, 0x74, 0x1a, 0xeb, 0x03, 0x54, 0xc1, 0xef, 0x50, 0x36, 0x8f, 0x10,
	0x3a, 0x35, 0x72, 0xd2, 0xae, 0x9d, 0x83, 0x37, 0x85, 0x28, 0xe0, 0x0e, 0xe4, 0xe5, 0x79, 0x40,
	0x8f, 0x96, 0x39, 0xe8, 0x97, 0xc7, 0x79, 0xbc, 0xe6, 0xab, 0x42, 0x39, 0x07, 0x3b, 0x59, 0x6b,
	0x94, 0x16, 0xb8, 0xb8, 0x0d, 0xff, 0xc3, 0xb9, 0x80, 0x7d, 0x6d, 0x95, 0xd0, 0x13, 0x3d, 0x7a,
	0x75, 0x49, 0x9d, 0x93, 0xb5, 0xdf, 0x17, 0x78, 0xda, 0x4e, 0x98, 0x78, 0xab, 0x8b, 0x66, 0xe2,
	0xa5, 0x2d, 0x53, 0x17, 0xf6, 0xe6, 0x97, 0xda, 0xec, 0xd8, 0xf2, 0x51, 0x37, 0x95, 0xae, 0x9c,
	0x77, 0xc1, 0x4c, 0x9b, 0x78, 0x93, 0xd9, 0xea, 0xda, 0x98, 0xcc, 0xd2, 0x56, 0xe5, 0x12, 0x4a,
	0xc6, 0xa8, 0x22, 0x63, 0xa6, 0xd2, 0xe6, 0xde, 0x39, 0xdd, 0x10, 0x91, 0xa0, 0xb6, 0xed, 0x1f,
	0x39, 0xf1, 0xf5, 0xca, 0x96, 0x7f, 0x17, 0xde, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x88,
	0xaa, 0xb4, 0x3f, 0x08, 0x00, 0x00,
}
